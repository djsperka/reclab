' gensound.s2s
'
' These are utility functions for generating arrays of numbers suitable for sound generation with the 1401. 
' There is a means to have a sound "generated" by reading voltage values from one of a list of files, 
' selected at random. Make sure to call gensoundInitRandomList first, then each call gensoundRandomFromList
' cycles through the list generated using the directory and file mask you provide. The list is randomized, 
' and every file in the list will be used once before running through the list again. Note that the list is 
' NOT randomized again once you've run through it completely. 
'
' $Log$
' Revision 1.4  2008/03/26 17:16:14  devel
' Change function names to gensound*. Fix bug in gensoundInitRandomList when
' no noise files found.
'
'


const gensoundpi := 3.141592653589793;
const gensoundMaxFiles% := 400;
var gensoundFileList$[gensoundMaxFiles%];
var gensoundRandom%[gensoundMaxFiles%];
var gensoundCurrentIndex% := 0;
var gensoundNumFileList% := 0;
var gensoundDebug% := 0;

#include "genrandom.s2s"

proc gensoundSetDebug(debug%)
    if debug% = 0 then
        gensoundDebug% := 0;
    else
        gensoundDebug% := 1;
    endif
end


func gensoundInitRandomList%(soundsDir$, soundsMask$)

    if gensoundDebug% = 1 then
        PrintLog("gensoundInitRandomList: Loading files from " + soundsDir$ + " using mask " + soundsMask$ + "\n");
    endif
    
    ' Probably only have to do something if NOISE will be required - load a file list or
    ' something. 

    if Len(soundsDir$) > 0 then
        var sdirtmp$;   ' Save current dir
        sdirtmp$ := FilePath$(0);       ' save current dir
        if FilePathSet(soundsDir$, 0) < 0 then
            Message("Cannot set dir to sounds dir \"" + soundsDir$ + "\"");
        else
            gensoundNumFileList% := FileList(gensoundFileList$[], -1, soundsMask$);
            if gensoundNumFileList% > 0 then
                genrandomIndices(gensoundRandom%[], gensoundNumFileList%);
            endif
            FilePathSet(sdirtmp$, 0);       ' restore dir
        endif
    endif
    
    if gensoundDebug% = 1 then
        PrintLog("gensoundInitRandomList: Loaded " + str$(gensoundNumFileList%) + " sound files.\n");
    endif

    return gensoundNumFileList%;
    
end

' Generate sz% monotone voltage values in array v[]. The last value, v[sz%-1], is set to 0 
' (since the 1401 DAC will be left at the last value after the waveform has been 
' played). The waveform will be a sinusoid, with freq 'toneHz'. The DAC output 
' sampling rate should be set in 'sampleHz'. 

Proc gensoundTone(v[], sz%, vmin, vmax, toneHz, sampleHz)

    var i%;
    for i% := 0 to sz%-1 do
        v[i%] := vmin + (vmax-vmin)*sin(2*gensoundpi*toneHz*i%/sampleHz);
    next

    ' Set the last value to 0
    v[sz%-1] := 0;

end


' Generate sz% voltage values in array v[] representing noise for space1g. 
' The last value, v[sz%-1], is set to 0 
' (since the 1401 DAC will be left at the last value after the waveform has been 
' played). The DAC output sampling rate should be set in 'sampleHz'. 

Proc gensoundNoise(v[], sz%, vmin, vmax, sampleHz)
    var i%;
    
    ' dummy here just set 0's.
    for i% := 0 to sz%-1 do
        v[i%] := 0;
    next

end



' Gets sz% voltage values in array v[] representing noise for space1g. 
' Values are fetched from a file in the list obtained in GenerateSoundInit. The 
' filename used is returned in 
' The last value, v[sz%-1], is set to 0 
' (since the 1401 DAC will be left at the last value after the waveform has been 
' played). The DAC output sampling rate should be set in 'sampleHz'. 

func gensoundRandomFromList%(v[], sz%, file$)
    var status% := 0;
    var handle;
    var nread% := 0;
    
    if gensoundNumFileList% <= 0 then
        status% := -1;
        PrintLog("gensoundRandomFromList: List is empty! Did you call gensoundInitRandomList()?");
        return status%;
    endif
    
    
    if gensoundCurrentIndex% = gensoundNumFileList% then
        gensoundCurrentIndex% := 0;
    endif

    ' Open file
    file$ := gensoundFileList$[gensoundCurrentIndex%];
    handle := FileOpen(gensoundFileList$[gensoundCurrentIndex%], 1);
    if handle < 0 then
        status% := -1;
    else
        nread% := BRead(v[]);
        if nread% < sz% then
            PrintLog("gensoundRandomFromList: File " + gensoundFileList$[gensoundCurrentIndex%] + " has only " + str$(nread%) + " values. Expecting at least " + str$(sz%) + ".\n");
            status% := -1;
        endif
        FileClose(handle);
    endif
    
    return status%;
end


