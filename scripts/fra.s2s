#include "recgen.s2s"
#include "triallistgen.s2s"
#include "gensound.s2s"

const fraDAC0Rate      := 166666.6666667;      ' that's 1/6us in case you're interested.
const fraDAC0%         := 0;
const fraSoundSize%    := 8333;
const fraDAC0Key$        := "A";
const fraNoiseScaleFactor   := 14000.0;
var fraSoundDAC%[fraSoundSize%];          ' 16 bit ints; -32768 to 32767. Should start/stop at 0!!!

var fraLowFreq := 100;
var fraHighFreq := 40000;
var fraLowAtten := 1;
var fraHighAtten := 100;
var fraOutputRoot$;
var fraBestSpk% := 1;
const fraAheadSpk% := 12;
var fraBestSelection% := 1;
var fraAheadSelection% := 1;
var fraIntensitySelection% := 1;
var fraTxtFileList$[100];
var fraTxtFileCount% := 0;
var fraNTrialsPerIntensity% := 12;
var fraNTrialsPerBlock% := 4;
var fraNBlocksRequired%;
const fraMinS1Trials% := 3;
const fraMaxS1Trials% := 7;
var fraS1TrialList%[fraMaxS1Trials%];
var fraNS1Trials%;
var fraCurrentS1Trial%;
var fraS2TrialList%[1];
var fraTrialTypes% := 0;
const fraMaxTrialTypes% := 22;
var fraS2Loc%[fraMaxTrialTypes%];
var fraS2Atten[fraMaxTrialTypes%];
var fraAttenSteps%;
var fraFreqSteps%;
const fraMaxPick% := 496;
var fraNPicks%;
var fraS1PickIndex% := 1;
var fraS1FreqPick%[fraMaxPick%][2];
var fraS1AttenPick%[fraMaxPick%][2];
var fraNextPick%[2];
var fraNFreqSteps%:= 0;
var fraNAttenSteps% := 0;
const fraMaxArray% := 50;
var fraS1AttenArray[fraMaxArray%];
var fraS1FreqArray[fraMaxArray%];
var fraS1Tones%[fraMaxArray%][fraSoundSize%];
var fraCurrentFreq;     ' value for current trial. Valid from Trial%() to TrialComplete%()
var fraCurrentAtten;    ' ditto
var fraCurrentSpk%;     ' once again
var fraTrialCount% := 0;    ' Overall trial counter

var fraDebug% := 0;
var fraWindowData%;     ' data window handle
var fraWindowXY%;       ' xy window handle
var fraChanWM%;         ' wavemark channel
var fraChanTrig%;       ' trigger channel
var fraChanLever%;      ' channel that carries lever signal
var fraChanTM%;         ' text mark channel




const fradlgRoot% := 1;
const fradlgFreqLow% := 2;
const fradlgFreqHigh% := 3;
const fradlgAttenLow% := 4;
const fradlgAttenHigh% := 5;
const fradlgNTrials% := 6;
const fradlgNTrialsPerBlock% := 7;
const fradlgBestSpk% := 8;
const fradlgBestInput% := 9;
const fradlgAheadInput% := 10;
const fradlgIntensityInput% := 11;

'------- Testing% --------------------------------------------------------
'
' Called to see if we are just testing. Return 1 if testing (as if running on a machine
' with no access to serial/tdt stuff), and all serial/tdt calls are bypassed. Mostly 
' positive/success returns - useful for getting scripts to run, but should not be trusted
' to fully exercise all code paths. 
' Return 1 if want testing mode, return 0 otherwise. 
'
'--------------------------------------------------------------------------------

func Testing%()
    return 0;
end


'------- InitializeExpt% --------------------------------------------------------
'
' Called after generic dialog. Open dialog, initialize stuff specific to this expt. 
' Return 1 if all is well, 0 if user hit Cancel, or -1 to abort expt. 
'
'--------------------------------------------------------------------------------


func InitializeExpt%(debug%, wdata%, wxy%, nch%, channels%[])
    var status% := 1;
    var i%;
    var n%;
    var nf%, na%;
    var totalOctaves;
    var octaveStep;
    
    fraDebug% := debug%;
    fraWindowData% := wdata%;
    fraWindowXY% := wxy%;
    fraChanWM% := channels%[0];
    fraChanTrig% := channels%[1];
    fraChanLever% := channels%[2];
    fraChanTM% := channels%[3];
    if fraDebug% = 1 then
        gensoundSetDebug(fraDebug%);
    endif

    
    status% := FraScriptDialog%();
    PrintLog("FraScriptDialog returned %d\n", status%);

    ' Load intensity file
    fraTrialTypes% := FraLoadIntensityFile%(fraTxtFileList$[fraIntensitySelection%], stim$, fraS2Loc%[], fraS2Atten[], fraMaxTrialTypes%);
    if fraTrialTypes% <= 0 then
        status% := 0;
    endif

    LogInfo("Loaded " + str$(fraTrialTypes%) + " trial types from " + fraTxtFileList$[fraIntensitySelection%]);

    fraNPicks% := FraLoadFRAFile(fraTxtFileList$[fraAheadSelection%], stim$, fraNFreqSteps%, fraNAttenSteps%, fraS1FreqPick%[][0], fraS1AttenPick%[][0], fraMaxPick%);
    if fraNPicks% <= 0 then
        LogError("", "Error loading ahead pick file.");
        status% := 0;
    else
        LogInfo("Loaded " + str$(fraNPicks%) + " ahead picks from file " + fraTxtFileList$[fraAheadSelection%]);
        n% := FraLoadFRAFile(fraTxtFileList$[fraBestSelection%], stim$, nf%, na%, fraS1FreqPick%[][1], fraS1AttenPick%[][1], fraMaxPick%);
        if n% <= 0 then
            LogError("", "Error loading best pick file.");
        else
            if n% <> fraNPicks% then
                LogError("", "Loaded " + str$(n%) + " ahead picks from " + fraTxtFileList$[fraBestSelection%] + ", and " + str$(fraNPicks%) + " best picks from " + fraTxtFileList$[fraBestSelection%]);
                status% := 0;
            else
                LogInfo("Loaded " + str$(n%) + " best picks from file " + fraTxtFileList$[fraBestSelection%]);
            endif
        endif
    endif
    fraNextPick%[0] := 0;
    fraNextPick%[1] := 0;

    ' Set up freq and atten arrays. Atten array is easy linear division:
    fraS1AttenArray[0] := fraLowAtten;
    for i% := 1 to fraNAttenSteps% do
        fraS1AttenArray[i%] := fraS1AttenArray[i%-1] + (fraHighAtten-fraLowAtten)/fraNAttenSteps%;
    next
    
    ' Freq array is a little harder.
    totalOctaves := 3.322 * Log(fraHighFreq/fraLowFreq);
    octaveStep := totalOctaves / fraNFreqSteps%;
    fraS1FreqArray[0] := fraLowFreq;
    for i% := 1 to fraNFreqSteps% do
        fraS1FreqArray[i%] := fraS1FreqArray[i%-1] * Pow(2, octaveStep);
        gensoundTone(fraS1Tones%[i%][], fraSoundSize%, fraS1FreqArray[i%], fraDAC0Rate); 
    next

    ' Initialize trial list generator. This will be used to generate S2 trials. There's only one
    ' trial in the list, but the trial list generator takes care of the blocks, ensuring that 
    ' S2 trials are run so that they are balanced in blocks.
    fraNBlocksRequired% := fraNTrialsPerIntensity%/fraNTrialsPerBlock%;
    tlgInit(fraTrialTypes%, fraNTrialsPerBlock%, fraNBlocksRequired%, 1, 1);

    ' Initialize PlayWave areas. The call to InitializePlayWaveAreas MUST
    ' come before the call to InitializeWindows -- that's where FileNew() is called. See Spike2
    ' docs for PlayWaveAdd(): PlayWaveAdd must be called before FileNew() for sampling window. 
    InitializePlayWaveAreas();

            
    return status%;
end


'------- InitializeTrials% --------------------------------------------------------
'
' Called after generic dialog. Open dialog, initialize stuff specific to a single set of 
' S1/S2 trials. 
' Return 1 if all is well, 0 if done, -1 for error (will exit also)
'
'--------------------------------------------------------------------------------

func InitializeTrials%()
    var status% := 1;
    var i%;

    fraS1PickIndex% := 1-fraS1PickIndex%;   ' toggles between 0 and 1
    fraNS1Trials% := FraGetS1TrialList%(fraS1TrialList%[], fraS1PickIndex%, fraMinS1Trials%, fraMaxS1Trials%);
    fraCurrentS1Trial% := 0;
    if tlgGetTrialList%(fraS2TrialList%[]) = 0 then
        status% := 0;
    endif

'   Now copy tones to the play wave areas.
    for i% := 0 to fraNS1Trials%-1 do
        
        ' get tone
'        gensoundTone(fraSoundDAC%[], fraSoundSize%, fraS1FreqArray[fraS1FreqPick%[fraS1TrialList%[i%]][fraS1PickIndex%]], fraDAC0Rate);
            
        ' copy tone to play wave area
        PlayWaveCopy(GetPlayWaveKey$(i%), fraS1Tones%[ fraS1FreqPick% [fraS1TrialList%[i%]] [fraS1PickIndex%] ][]);
    next
    
    '   Generate noise and copy to play wave area
    LogInfo("Generate noise.");
    gensoundGaussian(fraSoundDAC%[], fraSoundSize%, fraNoiseScaleFactor, fraDAC0Rate);
    PlayWaveCopy(GetPlayWaveKey$(fraMaxS1Trials%), fraSoundDAC%[]);
    LogInfo("Sounds ready.");
    
    return status%;
end


func ExptComplete%()

    FilePathSet(data$);
    View(fraWindowData%).FileSaveAs(fraOutputRoot$ + ".smr", -1);
'    FileClose(spcHBak%);
'    FileClose(spcHBeh%);
    return 0;

end

'----------- Trial%(ttype%) ----------------------------------------------------------------
'
' Initiate a trial. When ttype% = 0 this trial is an S1 trial, when ttype% = 1  its an S2 trial. 
' Return 0 if all is well, negative if not (script will exit immediately). 
'
'--------------------------------------------------------------------------------

func Trial%(ttype%)
    var status% := 0;

    docase 
    case ttype% = 0 then
        ' S1 trial. We maintain the counter to tell us which trial in fraS1TrialList%[] is the one we want. 
        LogInfo("Trial type 0, Pick index " + str$(fraS1PickIndex%) + " fraS1TrialList[" + str$(fraCurrentS1Trial%) + "] = " + str$(fraS1TrialList%[fraCurrentS1Trial%]));
        LogInfo("Freq (" + str$(fraS1FreqPick%[fraS1TrialList%[fraCurrentS1Trial%]][fraS1PickIndex%]) + ") " + 
            str$(fraS1FreqArray[fraS1FreqPick%[fraS1TrialList%[fraCurrentS1Trial%]][fraS1PickIndex%]]) + 
            " Atten (" + str$(fraS1AttenPick%[fraS1TrialList%[fraCurrentS1Trial%]][fraS1PickIndex%]) + ") " + 
            str$(fraS1AttenArray[fraS1AttenPick%[fraS1TrialList%[fraCurrentS1Trial%]][fraS1PickIndex%]]));
         fraCurrentFreq := fraS1FreqArray[fraS1FreqPick%[fraS1TrialList%[fraCurrentS1Trial%]][fraS1PickIndex%]];
         fraCurrentAtten := fraS1AttenArray[fraS1AttenPick%[fraS1TrialList%[fraCurrentS1Trial%]][fraS1PickIndex%]];
         fraCurrentSpk% := fraBestSpk%;
         if fraS1PickIndex% = 0 then
            fraCurrentSpk% := fraAheadSpk%;
         endif
         
        PlaySound();
    case ttype% = 1 then
        LogInfo("Trial type 1, Pick index " + str$(fraS1PickIndex%) + " fraS2TrialList[0]= " + str$(fraS2TrialList%[0]));
        fraCurrentAtten := fraS2Atten[fraS2TrialList%[0]];
        fraCurrentFreq := -1;
        fraCurrentSpk% := fraAheadSpk%;
        if fraS1PickIndex% = 0 then
        fraCurrentSpk% := fraBestSpk%;
        endif
        PlaySound();
    else
        LogError("Trial", "Unknown ttype (" + str$(ttype%) + ")");
        status% := -1;
    endcase

    return status%;
end

'----------- Trial%Complete(ttype%, success%) -----------------------------------
'
' Trial has ended. ttype% same meaning as for Trial%. success% 1=good, 0=bad. 
' Record text marker, analysis update. 
' Return value of -1 means an error has occurred, abort. 
' When ttype%=0, return value of 0 means continue with S1 trials, return value of 1
' means move on to S2 trial. 
' When ttype%=1 the return value (unless it is negative) is ignored. 
' 
'
'--------------------------------------------------------------------------------

func TrialComplete%(ttype%, success%)
    var status% := 0;
    docase 
    case ttype% = 0 then
        fraCurrentS1Trial% += 1;
        LogInfo("Trial ttype=0 complete, success=" + str$(success%));
        if fraCurrentS1Trial% = fraNS1Trials% then
            status% := 1;
        endif
    case ttype% = 1 then
        LogInfo("Trial ttype=0 complete, success=" + str$(success%));
        if success% = 1 then
            tlgTrialIndexCompleted(fraS2TrialList%[0]);
        endif
    else
        LogError("Trial", "Unknown ttype (" + str$(ttype%) + ")");
        status% := -1;
    endcase
    
    ' Increment trial counter
    fraTrialCount% += 1;
    
    return status%;
end





'-------- fra configuration dialog ---------------------------------------


func FraScriptDialog%()
    var i%;
    var status% := 0;
    var sFileCount% := 0;
    var sFileMask$ := "*.txt";
    var pathTemp$;
    var ispk%;
    
    ' Fetch parameters from registry
    
    FraScriptDialogGetParams();
    ispk% := fraBestSpk% -1;

    ' Get file list for trial types. If no files are found in stim$ matching the mask, 
    ' show a message and quit. 
    FilePathSet(stim$);
    fraTxtFileCount% := FileList(fraTxtFileList$, -1, sFileMask$);
    if fraTxtFileCount% = 0 then
        Message("There are no files in dir %s matching the mask %s", stim$, sFileMask$);
        return 0;   ' will look as if user hit Cancel
    endif
    
    ' Generate the dialog
    
	DlgCreate("Fra Parameters", 25, 10);
    DlgString(fradlgRoot%, "Output file root|Base name of output file, e.g. a022098a", 32, "a-zA-Z0-9_-");
    DlgReal(fradlgFreqLow%, "Low frequency(hz)", 10, 50000);
    DlgReal(fradlgFreqHigh%, "High frequency(hz)", 10, 50000);
    DlgReal(fradlgAttenLow%, "Low attenuation", 1, 100);
    DlgReal(fradlgAttenHigh%, "High attenuation", 1, 100);
    DlgInteger(fradlgNTrials%, "# trials per intensity", 1, 20, 0, 0, 1);
    DlgInteger(fradlgNTrialsPerBlock%, "# trials per block", 1, 20, 0, 0, 1);
    DlgList(fradlgBestSpk%, "Best speaker(not 12)", "1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16");
    DlgList(fradlgBestInput%, "Best input", fraTxtFileList$, fraTxtFileCount%);
    DlgList(fradlgAheadInput%, "Ahead input", fraTxtFileList$, fraTxtFileCount%);
    DlgList(fradlgIntensityInput%, "Intensity input", fraTxtFileList$, fraTxtFileCount%);

    DlgButton(1, "OK", FraCheckOK%);
    DlgButton(0, "Cancel");
    'DlgAllow(0, 0, FraDlgChanged%);

    ' Show the dialog. 

	i%:=DlgShow(fraOutputRoot$, fraLowFreq, fraHighFreq, fraLowAtten, fraHighAtten, 
                fraNTrialsPerIntensity%, fraNTrialsPerBlock%, ispk%, fraBestSelection%, fraAheadSelection%, fraIntensitySelection%);
                

    ' If user hit OK then save parameters (and return 1). 

	if i% = 1 then
        FraScriptDialogSaveParams();
        fraBestSpk% := ispk% + 1;
        PrintLog("best speaker " + str$(fraBestSpk%) + "\n");
        status% := 1;
    else
        status% := 0;
    endif
    
    ' If debug was set, then turn on debugging for supporting scripts
'    if spcDebug% = 1 then
'        gensoundSetDebug(spcDebug%);
'    endif

	return status%;
end;



func FraCheckOK%()
    var status% := 0;
    var o$;
    var dummy$;
    var i1%;
    var i2%;

    ' Verify that output root is not null
    o$ := DlgValue$(fradlgRoot%);
    if len(o$) = 0 then
        Message("Please enter an output root.");
        status% := 1;
    endif

    ' See if output file(s) already exist. 
    
    FilePathSet(data$);
    if FileList(dummy$, -1, o$ + ".*")>0 then
        Message("Data files with this name (" + o$ + ") already exist.\nTry another name.");
        status% := 1;
    endif

    ' Open ecode and bak file
'    dummy$ := data$ + "\\" + o$ + ".beh";
'    PrintLog("Opening ecode file %s\n", dummy$);
'    spcHBeh% := FileOpen(dummy$, 8, 1);
'    Print("trial\tpos\tS1\tS2\tatten\tresp\trxtime\t freq is %d\n", spcFreq%);
'    dummy$ := data$ + "\\" + o$ + ".bak";
'    PrintLog("Opening bak file %s\n", dummy$);
'    spcHBak% := FileOpen(dummy$, 8, 1);

    ' Check that the best speaker chosen is not speaker 12! Because the index starts at 0, we test that the value is not 11.
    if DlgValue(fradlgBestSpk%) = 11 then
        Message("Best speaker must NOT be speaker 12!");
        status% := 1;
    endif
    
    ' Check that fraNTrialsPerIntensity% is a multiple of spcNTrialsPerBlock%
    i1% := DlgValue(fradlgNTrials%);
    i2% := DlgValue(fradlgNTrialsPerBlock%);
    if i1% mod i2% <> 0 then
        Message("# of trials per intensity must be a multiple of block size!");
        status% := 1;
    endif

    return status%;
end


'-------- fra configuration dialog ---------------------------------------


proc FraScriptDialogSaveParams()
	var stmp$;
	var key$;

    key$:="Reclab\\Fra";
	Profile(key$, "OutputRoot", fraOutputRoot$);
    stmp$ := str$(fraLowFreq);
	Profile(key$, "LowFreq", stmp$);
    stmp$ := str$(fraHighFreq);
	Profile(key$, "HighFreq", stmp$);
    stmp$ := str$(fraLowAtten);
	Profile(key$, "LowAtten", stmp$);
    stmp$ := str$(fraHighAtten);
	Profile(key$, "HighAtten", "100", stmp$);
	Profile(key$, "NTrialsPerIntensity", fraNTrialsPerIntensity%);
	Profile(key$, "NTrialsPerBlock", fraNTrialsPerBlock%);
	Profile(key$, "BestSpeaker", fraBestSpk%);
	Profile(key$, "BestSelection", fraBestSelection%);
	Profile(key$, "AheadSelection", fraAheadSelection%);
	Profile(key$, "IntensitySelection", fraIntensitySelection%);

	return;
end

proc FraScriptDialogGetParams()
	var stmp$;
	var key$;

    key$:="Reclab\\Fra";
	Profile(key$, "OutputRoot", fraOutputRoot$, fraOutputRoot$);
	Profile(key$, "LowFreq", "1", stmp$);
    fraLowFreq := val(stmp$);
	Profile(key$, "HighFreq", "40000", stmp$);
    fraHighFreq := val(stmp$);
	Profile(key$, "LowAtten", "1", stmp$);
    fraLowAtten := val(stmp$);
	Profile(key$, "HighAtten", "100", stmp$);
    fraHighAtten := val(stmp$);
	Profile(key$, "NTrialsPerIntensity", fraNTrialsPerIntensity%, fraNTrialsPerIntensity%);
	Profile(key$, "NTrialsPerBlock", fraNTrialsPerBlock%, fraNTrialsPerBlock%);
	Profile(key$, "BestSpeaker", fraBestSpk%, fraBestSpk%);
	Profile(key$, "BestSelection", fraBestSelection%, fraBestSelection%);
	Profile(key$, "AheadSelection", fraAheadSelection%, fraAheadSelection%);
	Profile(key$, "intensitySelection", fraIntensitySelection%, fraIntensitySelection%);

	return;
end







' return number of trial types loaded

func FraLoadIntensityFile%(intfile$, intdir$, loc%[], atten[], maxttypes%)
    var fh%;
    var n% := 0;
    var i%;
    
    ' Open file
    FilePathSet(intdir$);
    fh% := FileOpen(intfile$, 8);
    if fh% < 0 then
        LogError("", "Cannot open intensity file " + intfile$ + "\n");
        return -1;
    endif

    ' First line is number of types
    if Read(n%) <> 1 then
        LogError("", "Cannot read first line of intensity file " + intfile$ + "\n");
    else
        for i% := 0 to n%-1 do
            if Read(loc%[i%], atten[i%]) <> 2 then
                LogError("", "Cannot read ttype " + str$(i%) + " from intensity file " + intfile$ + "\n");
                n% := 0;
                i% := n%+1;
            endif
        next
    endif
    FileClose(fh%);
    return n%;
end
                
' Load the file frafile$.
' First line is the # of freq steps
' Second line is # of atten steps
' subsequent lines have two ints each, first is speaker pick, second is atten pick. 

func FraLoadFRAFile(frafile$, fradir$, &nfreqsteps%, &nattensteps%, freqPick%[], attenPick%[], maxPick%)
    var fh% := 0;
    var n% := 0;
    var i%;
    
    ' Open file
    FilePathSet(fradir$);
    fh% := FileOpen(frafile$, 8);
    if fh% < 0 then
        LogError("", "Cannot open fra file " + frafile$ + "\n");
        return -1;
    endif

    ' read freq steps, atten steps
    if Read(nfreqsteps%) <> 1 then
        LogError("", "Cannot read first line of fra file " + frafile$);
        FileClose(fh%);
        return -1;
    endif

    if Read(nattensteps%) <> 1 then
        LogError("", "Cannot read second line of fra file " + frafile$);
        FileClose(fh%);
        return -1;
    endif

    ' The number of picks to read is (nfreqsteps+1) * (nattensteps + 1)
    n% := (nfreqsteps%+1)*(nattensteps%+1);
    for i% := 0 to n%-1 do
        if Read(freqPick%[i%], attenPick%[i%]) <> 2 then
            LogError("", "Cannot read line " + str$(2+i%) + " from fra file " + frafile$);
            return -1;
        endif
    next
    FileClose(fh%);
            
    return n%;
end

func FraGetS1TrialList%(list%[], pickIndex%, minTrials%, maxTrials%)
    var i%;
    var ntrials%;
    
    ' pick a random number between fraMinS1Trials% and fraMaxS1Trials%
    ntrials% := Rand(maxTrials%-minTrials%, minTrials%);
    for i% := 0 to ntrials%-1 do
        if fraNextPick%[pickIndex%] = fraNPicks% then
            fraNextPick%[pickIndex%] := 0;
        endif
        list%[i%] := fraNextPick%[pickIndex%];
        fraNextPick%[pickIndex%] += 1;
    next
    return ntrials%;
end


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' InitializePlayWaveAreas - add play wave areas for sounds, areas "A", "B", ... 
' The last one is meant for the S2 noise stimulus. 

Proc InitializePlayWaveAreas()
    var st;
    var i%;

    for i% := 0 to fraMaxS1Trials% do
        
        st := PlayWaveAdd(GetPlayWaveKey$(i%), GetPlayWaveKey$(i%), fraDAC0%, fraDAC0Rate, fraSoundSize%);
        if st < 0 then
            Message("Error in PlayWaveAdd for area " + GetPlayWaveKey$(i%));
            halt;
        else
            PlayWaveTrigger(GetPlayWaveKey$(i%), 1);
        endif        
    
    next

end

func GetPlayWaveKey$(index%)

    return Chr$(Asc(fraDAC0Key$)+index%);
    
end


'----------------- PlaySound ---------------------------------------------------------------
'
' PlaySound plays the sound for the trial number in spcTrialListIndex.
' If this is the repeated-last-index (if spcTrialListIndex% = spcNTrialList%)
' then play spcNTrialList%-1 sound - that makes the repeat happen.

Proc PlaySound()
    var spk%[1];
    var atten;
    var s$;
    var playInd%;
    var playChar$ := "T";
    
    ' Determine sound index to play
    playInd% := fraCurrentS1Trial%;
    if fraCurrentS1Trial% = fraNS1Trials% then
        playInd% := fraMaxS1Trials%;    ' Noise
        playChar$ := "N";
    endif
    
    ' Set speaker and atten
    recSpeaker%(fraCurrentSpk%);
    recAtten%(fraCurrentAtten);

    LogStatus("PlaySound", 
              "SPK " + str$(fraCurrentSpk%) + 
              "ATT " + str$(fraCurrentAtten));

    ' Send sample key for the play wave area. The play wave areas are triggered, so this 
    ' command alone will NOT play the sound - the SampleKey("T") triggers it. 
    ' The sample text string contains the following (comma-separated) fields:
    ' 1. playChar: T for S1 trials (tone), N for S2 trial (noise)
    ' 2. trial number: overall trial counter
    ' 3. S1 trial index, starts at 0. S2 trial has same index as last S1 trial. 
    ' 4. speaker number
    ' 5. atten
    ' 6. freq for tone, -1 for noise. 
    
    SampleKey(GetPlayWaveKey$(playInd%));
    s$ := Print$("\"%s\",%d,%d,%d,%.1f,%.2f", playChar$, fraTrialCount%, playInd%, fraCurrentSpk%, fraCurrentAtten, fraCurrentFreq);
    SampleText(s$, -1);
    SampleKey("T");
    
end


