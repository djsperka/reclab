
'This script does not execute any code when the script which includes it is run - it is merely the set of functions
'which define the workings of the presentation engine.  Use RunStimulusPresentationEngine%() to get things going.


'==========================   Global variables  ============================================


' channel numbers and window handles
var rgDAC0Channel% := 1;          ' DAC0 output should be tee'd and input to ADC port 6
var rgTrigChannel% := 2;          ' Channel for trigger recording (teed from trig input!)
var rgLeverChannel% := 3;
var rgTrode1Channel% := 11;       ' First electrode. Don't use channel numbers above this

' for anything other than electrodes!
var rgXYWindowView%;              ' View variable for XY window
var rgDataWindowView%;            ' View variable for data window


'stuff 
const rgTTMaxSpeakers% := 100;
const rgMaxTrials%        := 100;         ' Maximum number of trials per speaker.
const rgDAC0Key$        := "A";
var rgHBeh%;       ' ecode file
var rgHBak%;       ' spikes
var rgTLastProcessed := -1;
var rgWindowData%;
var rgWindowXY%;
var rgChanTrig%;
var rgChanWM%;
var rgChanTM%;
var rgChanLever%;
var rgOutputRoot$          := "output";        ' root filename for output file
var rgTrialCount% := 0;                   ' overall trial counter - each trial gets a number!
var rgTTSpeakers%[rgTTMaxSpeakers%];    ' speaker numbers - each is considered a trial type. Can have duplicates. 
var rgTTSpikeCounts%[rgTTMaxSpeakers%][rgMaxTrials%]; ' spike counts for completed trials on each trial type
var rgTTSpikeRate[rgTTMaxSpeakers%][rgMaxTrials%];    ' spike rates for completed trials on each trial type
var rgTTSpikeRateMean[rgTTMaxSpeakers%];' mean spike rate for each trial type
var rgTTSpikeRateStd[rgTTMaxSpeakers%]; ' std dev for above. 
var rgTTAtten[rgTTMaxSpeakers%];        ' atten to use for each speaker number in g_spcTTSpeakers%[]
var rgTTIndexBackground%;                 ' index into TT arrays which is the background speaker/atten pair. 
var rgTone%                := 0;
var rgFreq%                := 20000;


' toolbar button numbers
const rgStartButton%  := 1;
const rgStopButton%   := 2;
const rgPauseButton%  := 3;
const rgResumeButton% := 4;
const rgRewardButton% := 5;

' States and state control vars
var rgIsPaused%                               := 0;
var rgIsStarted%                              := 0;
const stateStart%                             := 0;
const stateInitializeTrials%                  := 1;
const stateWaitForInitiationMovement%         := 2;
const stateInitiationTimeout%                 := 3;
const statePreTrialDelay%                     := 4;
const stateStartSoundA%                       := 5;
const stateSoundAPlaying%                     := 6;
const stateISIDelay%                          := 7;
const stateStartSoundB%                       := 8;
const stateSoundBPlaying%                     := 9;
const stateTrainingReward%                    := 10;
const stateInResponseWindow%                  := 11;
const stateResponseReward%                    := 12;
const stateFalsePositive%                     := 13;
const stateResponseWindowTimeout%             := 14;
const stateDone%                              := 20;

var rgDelayIntervalTime         := 0;
var tNow:=0;		' latest time for which there are values recorded. Used in IdleLoop%
var tLast:=-1;		' last time we checked for a trigger. 
var iState%:=stateStart%;		' present state
var tStateStart:=-1;	' time that present state started. Used to measure wait time, fixation time, etc. 

var channels%[4];


#include "reccreate.s2s"  'functions for creation of stimuli



func RunStimulusPresentationEngine%()

    ' Initialize experimental stuff
'    channels%[0] := rgTrode1Channel%;
'    channels%[1] := rgTrigChannel%;
'    channels%[2] := rgLeverChannel%;
'    channels%[3] := 30;
'    if InitializeExpt%(rgDebug%) <> 1 then   'InitializeExpt%() is in recgen_template
'        rgLogError("NoState", "InitializeExpt returned something other than 1.");
'        halt;
'    endif
    
    ' Setup sampling configuration
    if is1401present% = 1 then
        CreateSampleConfiguration();   'CreateSampleConfiguration() is below     TODO: hope it is OK
    endif
    
    'Open XY and data windows, start sampling
    'Moved this after InitializeExpt%() because PlayWaveAdd() must be called before FileNew()
    if is1401present% = 1 then
        InitializeWindows();           'InitializeWindows() is below          TODO: hope it is OK
    endif
    
    
    ' Initialize toolbar. Once Toolbar is called the expt is controlled by the toolbar
    ' buttons. Toolbar() does not return until one of the toolbar functions returns 0 - Stop%()
    ' does that if pressed, IdleLoop%() returns an iStatus% of 0 when it reaches the end of all trials. 
    
    InitializeToolbar();   'InitializeToolbar() is below
    Toolbar("Hit \"Start\" to begin sampling.", 0x3ff);
    
    return 1;

end






'==========================  Local functions below ===========================================



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' CreateSampleConfiguration()
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc CreateSampleConfiguration()
    
	var index;
    var r;
    
    ' Initialize sampling settings
    
	SampleAutoComment(0);
	SampleAutoCommit(30);
    SampleAutoFile(0);
    SampleAutoName$("reclab000");
    
    ' Event channel 0 is for sound triggers
    SampleEvent(rgTrigChannel%, 0, 2, 10);
    SampleTitle$(rgTrigChannel%, "Trigger");
    
    ' Event channel 1 is for the lever
    SampleEvent(rgLeverChannel%, 1, 2, 10);
    SampleTitle$(rgLeverChannel%, "Lever");
    
    ' Text marks
    SampleTextMark(64);
    
    ' DAC0 (sound output) -> record this channel? It will inflate the file sizes......
    
    if rgDebug% = 1 then
        SampleWaveform(rgDAC0Channel%, 6, 50000);
        SampleTitle$(rgDAC0Channel%, "DAC0");
    endif
    
    
	' Electrode
    
	SampleWaveMark(rgTrode1Channel%, 0, 100, 34, 15, 28000); ' chan, port, event rate, points, pre-trigger, rate
	SampleTitle$(rgTrode1Channel%, "Trode 1"); 
    
    ' Set optimise mode (do this last). Settings specific to Power1401 625 (that's the "5"). 
    ' The second arg groups channels with same ideal rates together so they all get same 
    ' actual rate. That means multiple electrodes (if used) will all get same actual rate, 
    ' assuming you use same ideal rate (in SampleWavemark()). 
    
    SampleSequencer(script$ + "recgen.pls");
	SampleOptimise(2, 1, 5, 2, 50);  
    SampleMode(1);
end




'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' InitializeWindows()
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc InitializeWindows()
    var i%;
    var ang;
    
    ' Since we are opening files here, set the path. 
    FilePathSet(data$, 1, 1);
    
    ' Open xy window for use by expt.
    rgXYWindowView% := FileNew(12);
	Window(0, 50, 50, 100); 
	View(rgXYWindowView%).WindowVisible(1);
    
	'Open the data sampling window -- only if not in Testing mode!
    if Testing%() = 0 then
        rgDataWindowView% := FileNew(0,4);
        Window(0, 0, 100, 50); 
        View(rgDataWindowView%).WindowVisible(1);
    endif
    
end;




'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' InitializeToolbar - prepare toolbar buttons. Note that the idle processing function 
' (ToolbarSet(0, blah, blah)) is not set here. That's done when the user hits the start 
' button.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc InitializeToolbar()
    
	View(App(8)).WindowVisible(0);	'Hide the standard sample bar
	ToolbarVisible(1);
	ToolbarSet(rgStartButton%, "Start", Start%);
	ToolbarSet(rgStopButton%, "Stop", Stop%);
	ToolbarSet(rgPauseButton%, "Pause", Pause%);
	ToolbarSet(rgResumeButton%, "Resume", Resume%);
	ToolbarSet(rgRewardButton%, "Reward", Reward%);
    
    ' Explicitly set enabled state of things...
    ToolbarEnable(rgStartButton%, 1);
    ToolbarEnable(rgStopButton%, 0);
    ToolbarEnable(rgPauseButton%, 0);
    ToolbarEnable(rgResumeButton%, 0);
    ToolbarEnable(rgRewardButton%, 1);
    
end;



'----------- Trial%(ttype%) ----------------------------------------------------------------
'
' Initiate sound stim for a trial. When ttype% = 0 this trial is an S1 trial, when ttype% = 1  
' its an S2 trial. Return 0 if all is well, negative if not (script will exit immediately). 
'
'--------------------------------------------------------------------------------

'TODO - everything, just copied over from SPACE
func Trial%(ttype%)
    var status% := 0;
    docase 
    case ttype% = 0 then
        PlaySound();
    case ttype% = 1 then
        PlaySound();
    else
        rgLogError("Trial", "Unknown ttype (" + str$(ttype%) + ")");
        status% := -1;
    endcase
    return status%;
end



'----------------- PlaySound ---------------------------------------------------------------
'
' PlaySound plays the sound for the trial number in spcTrialListIndex.
' If this is the repeated-last-index (if spcTrialListIndex% = spcNTrialList%)
' then play spcNTrialList%-1 sound - that makes the repeat happen.
'
'-------------------------------------------------------------------------------------------

'TODO - everything, just copied over from SPACE

Proc PlaySound()
    var spk%[1];
    var atten;
    var s$;
    var playInd%;
    var playChar$;
    
    ' Determine what sound index to play. 
    playInd% := rgTrialListIndex%;
    playChar$ := "S";
    if rgTrialListIndex% = rgNTrialList% then
        playInd% := rgNTrialList%-1;
        playChar$ := "T";
    endif
    
    ' Increment trial counter
    rgTrialCount% := rgTrialCount% + 1;
    
    ' Set speaker and atten
    if Testing%() = 0 then
        recSpeaker%(rgTTSpeakers%[rgTrialList%[playInd%]]);
        
        atten := rgTTAtten[rgTrialList%[playInd%]] + 0.5*Floor(Rand(3, 0));
        recAtten%(atten);
        spk%[0] := rgTrialList%[playInd%];
    endif
    
    rgLogStatus("PlaySound", 
    "SPK " + str$(rgTTSpeakers%[rgTrialList%[playInd%]]) + 
    " ATT " + str$(rgTTAtten[rgTrialList%[playInd%]]) + "\n");
    
    ' Send sample key for the play wave area. The play wave areas are triggered, so this 
    ' command alone will NOT play the sound - the SampleKey("T") triggers it. 
    ' The sample text string contains the following (comma-separated) fields:
    ' 1. playChar: S for S1 trials, T for S2 trial
    ' 2. trial number: overall trial counter
    ' 3. S1 trial index, starts at 0. S2 trial has same index as last S1 trial. 
    ' 4. Trial type number. This may not be the same as the speaker number! Used as index in trial list generator, spcTTSpeaker[] and spcTTAtten[]. 
    ' 5. speaker number
    ' 6. atten
    ' 7. freq for tone, filename for noise. 
    
    if is1401present% = 1 then
        if rgTone% then
            SampleKey(GetPlayWaveKey$(0));
            ' saved string format speaker%,atten,frequency%
            s$ := Print$("\"%s\",%d,%d,%d,%d,%.1f,%d", playChar$, rgTrialCount%, playInd%, rgTrialList%[playInd%], rgTTSpeakers%[rgTrialList%[playInd%]], atten, rgFreq%);
            SampleText(s$, -1);
        else
            SampleKey(GetPlayWaveKey$(playInd%));
            ' saved string format speaker%,atten,soundfilename
            s$ := Print$("\"%s\",%d,%d,%d,%d,%.1f,\"%s\"", playChar$, rgTrialCount%, playInd%, rgTrialList%[playInd%], rgTTSpeakers%[rgTrialList%[playInd%]], atten, rgTrialListFilenames$[playInd%]);
            SampleText(s$, -1);
        endif
        SampleKey("T");
    endif
    
end



'----------- TrialComplete%(ttype%, success%) -----------------------------------
'
' Trial has ended. ttype% same meaning as for Trial%. success% 1=good, 0=bad. 
' Record text marker, analysis update. 
' Return value of -1 means an error has occurred, abort. 
' When ttype%=0, return value of 0 means continue with S1 trials, return value of 1
' means move on to S2 trial. 
' When ttype%=1 the return value (unless it is negative) is ignored. 
' 
'
'--------------------------------------------------------------------------------

'TODO: everything, just copied over from SPACE

func TrialComplete%(ttype%, success%)
    'var status% := 0;
    'return status%;
    var status% := 0;
    var strtmp$;
    docase
    case ttype% = 0 then
        if success% = 1 then
            ' Record completed trial here, and update online analysis. 
            strtmp$ := Print$("E,%d", rgTrialCount%);
            SampleText(strtmp$, -1);
            tlgTrialIndexCompleted(rgTrialList%[rgTrialListIndex%]);
            if is1401present% = 1 then
                ExtractSpace(rgTLastProcessed, MaxTime(), rgWindowData%, rgWindowXY%, rgHBeh%, rgHBak%, rgChanWM%, rgChanTM%, rgChanTrig%, rgChanLever%);
                rgTLastProcessed := MaxTime();
            endif
            'UpdateOnlineAnalysis();
            rgTrialListIndex% += 1;
            if rgTrialListIndex% = rgNTrialList% then
                status% := 1;
            endif
        else
            strtmp$ := Print$("F,%d", rgTrialCount%);
            SampleText(strtmp$, -1);
        endif
    case ttype% = 1 then
        if success% = 1 then
            strtmp$ := Print$("H,%d", rgTrialCount%);
            SampleText(strtmp$, -1);
        else
            strtmp$ := Print$("M,%d", rgTrialCount%);
            SampleText(strtmp$, -1);
        endif
    else
        rgLogError("TrialComplete", "Unknown ttype (" + str$(ttype%) + ")");
        status% := -1;
    endcase
    return status%;
end




'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' Start%()
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Start%()
    rgIsStarted% := 1;  'Is this ever used again?
    
    ' Disable start button, enable stop and pause
    
    ToolbarEnable(rgStartButton%, 0);
    ToolbarEnable(rgStopButton%, 1);
    ToolbarEnable(rgPauseButton%, 1);
    
    ' Oh yeah, start the sampling. 
    
    if is1401present% = 1 then
        SampleStart();
    endif
    
    ' Set idle function
    ToolbarSet(0, "", IdleLoop%);
    
    ' Tell the world about it. 
    
    ToolbarText("Sampling started.");
    return 1;
end




'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' Stop%()
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Stop%()
    PrintLog("Stop called\n");
    
    ' Stop sampling....
    
    if SampleStatus() <> -1 then
        SampleStop();
        '        FilePathSet(data$);
        '        FileSaveAs(spcOutputRoot$ + ".smr", -1);
    endif
       
    
    ' Returning zero from here any ToolbarSet() functions causes the 
    ' Toolbar() function to return.
    return 0;
end




'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' Pause%()
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Pause%()
    PrintLog("Pause called\n");
    rgIsPaused% := 1;
    ToolbarEnable(rgResumeButton%, 1);
    ToolbarEnable(rgPauseButton%, 0);
    return 1;
end




'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' Resume%()
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Resume%()
    rgIsPaused% := 0;
    ToolbarEnable(rgResumeButton%, 0);
    ToolbarEnable(rgPauseButton%, 1);
    return 1;
end




'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' Reward%()
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Reward%()
    ' TODO: Add reward func here!
    return 1;
end




''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' 
' ChangeStateTo
' 
' Call this function on exit from a state. The var stateTo% should be the state to enter
' on the next call to the loop function. 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc ChangeStateTo(stateTo%)
	iState% := stateTo%;
    if Testing%() = 0 then
        tStateStart := MaxTime();
    else
        tStateStart := tNow;
    endif
end;




''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' 
' rgLogStatus
' 
' Utility to write msg to log window. Will not write if rgDebug is not set. 
' Like 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc rgLogStatus(stateName$, msg$)
    if rgDebug% = 1 then
        PrintLog("S:    " + stateName$ + "  Tstart: " + str$(tStateStart) + " " + msg$ + "\n");
    endif
end




''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' 
' rgLogError
' 
' Like rgLogStatus, a utility to write msg to log window. 
' Unlike rgLogStatus, rgLogError will write no matter what - regardless of rgDebug value.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc rgLogError(stateName$, msg$)
    PrintLog("ERROR===============================================\n");
    if stateName$ = "" then
        PrintLog(msg$ + "\n");
    else
        PrintLog("S:    " + stateName$ + "  Tstart: " + str$(tStateStart) + " " + msg$ + "\n");
    endif
    PrintLog("====================================================\n");
end




''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' 
' rgLogInfo
' 
' Like rgLogStatus, a utility to write msg to log window. 
' Unlike rgLogStatus, rgLogInfo will write no matter what - regardless of rgDebug value.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc rgLogInfo(msg$)
    PrintLog("INFO " + msg$ + "\n");
end



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' IdleLoop%()
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func IdleLoop%()
	var iStatus% := 1;	' this is return value. value of 1 (0) continues (stops) processing
    var stmp%;
    var trtmp%;
    var strtmp$;
    var iLoop% := 1;  'Wrapping the case statement to allow multiple runs in one idle loop, when timing is critical
    
    if Testing%() = 0 then
        tNow := MaxTime();
    else
        'tNow += 1;
        tNow += .05;  'simulate 50 ms between loops, not 1 second
    endif
    
    while iLoop% = 1 do
        
        iLoop% := 0;  'Don't repeat this loop unless specifically asked to below
    
        ' State Logic - determine which state we are in 
        docase
        case iState% = stateStart% then
            
            rgLogStatus("Start", "Starting expt state loop.");
            ChangeStateTo(stateInitializeTrials%);
            
        case iState% = stateInitializeTrials% then
            
            ' prepare values for the next trial.
            ' this is the point where the expt can be paused. Operator can hit the pause
            ' button anytime, but the actual pause will happen here. 
            if rgIsPaused% = 0 then
                stmp% := InitializeTrials%();  'TODO: this appears to reload stimuli after a lever down timeout?  Make sure that's not necessary - can save time that way
                docase
                case stmp% = 0 then
                    rgLogStatus("InitializeTrials", "All trials are done!");
                    ChangeStateTo(stateDone%);
                case stmp% < 0 then
                    rgLogStatus("InitializeTrials", "Error return value from InitializeTrials%");
                    ChangeStateTo(stateDone%);
                else
                    rgLogStatus("InitializeTrials", "Trials ready.");
                    ChangeStateTo(stateWaitForInitiationMovement%);
                endcase
            endif
            
        case iState% = stateWaitForInitiationMovement% then
            rgLogStatus("WaitLvrDown", "Blink/Wait.");
            
            if Testing%() = 0 then
                stmp% := recBlinkUntilLeverDown%(.5, rgMaxLvrDownTime);
            else
                stmp% := 1;  'simulate success in lever press
            endif
            
            docase
            case stmp% = 1 then
                rgDelayIntervalTime := rgMinDelay + Rand(rgVarDelay, 0);
                SampleKey("P");  'TODO: What is this?  Still don't know.  Not in Recgen.pls!
                rgLogStatus("WaitLvrDown", "Delay interval=" + str$(rgDelayIntervalTime) + " s.");
                ChangeStateTo(statePreTrialDelay%);
            case stmp% = 0 then
                rgLogStatus("WaitLvrDown", "Timeout waiting for lever down.");
                ChangeStateTo(stateInitiationTimeout%);
            else
                Message("Error in recBlinkUntilLeverDown!");
                ChangeStateTo(stateDone%);
            endcase
            
        case iState% = stateInitiationTimeout% then
            
            if tNow - tStateStart > rgLvrDownTimeout then
                rgLogStatus("LvrDownTimeout", "Timeout period done.");
                ChangeStateTo(stateInitializeTrials%);
            endif
            
        case iState% = statePreTrialDelay% then
            
            if tNow - tStateStart >= rgDelayIntervalTime then
                rgLogStatus("DelayInterval", "Delay done.");
                ChangeStateTo(stateStartSoundA%);
            endif
            
        case iState% = stateStartSoundA% then
            
            rgLogStatus("TrialSoundA", "Call expt function");
            stmp% := Trial%(0);  'Trial%() is a function in template file, calls PlaySound...
            docase
            case stmp% = 0 then
                ChangeStateTo(stateSoundAPlaying%);
            case stmp% < 0 then
                rgLogStatus("TrialSoundA", "Trial returned negative value.");
                ChangeStateTo(stateDone%);
            else
                rgLogStatus("TrialSoundA", "Trial returned unknown value (>0).");
                ChangeStateTo(stateDone%);
            endcase
            
        case iState% = stateSoundAPlaying% then
            
            if PlayWaveStatus$() = "" then
                ChangeStateTo(stateISIDelay%);
            endif
            
        case iState% = stateISIDelay% then
            
            ' Check that lever is still down.
            if Testing%() = 0 then
                stmp% := recLeverDown%();
            else
                stmp% := 1;
            endif
            
            docase
            case stmp% < 0 then
                PrintLog("ERROR in recLeverDown()!!!\n");
                ChangeStateTo(stateDone%);
            case stmp% = 0 then
                SampleKey("R");  'not in Recgen.pls!
                rgLogStatus("WaitISI", "FAIL! Lever is up");
                TrialComplete%(0, 0);
                ChangeStateTo(stateFalsePositive%);
            else
                if tNow - tStateStart > rgInterStimInterval then
                    rgLogStatus("WaitISI", "ISI done.");
                    trtmp% := TrialComplete%(0, 1);
                    docase 
                    case trtmp% = 0 then
                        ChangeStateTo(stateStartSoundA%);
                    case trtmp% = 1 then
                        ChangeStateTo(stateStartSoundB%);
                    else
                        rgLogStatus("WaitISI", "Unknown return value from TrialComplete");
                        ChangeStateTo(stateDone%);
                    endcase
                endif
            endcase
            
        case iState% = stateStartSoundB% then
            rgLogStatus("TrialSoundB", "Call expt function");
            stmp% := Trial%(1);
            docase
            case stmp% = 0 then
                ChangeStateTo(stateSoundBPlaying%);
            case stmp% < 0 then
                rgLogStatus("TrialSoundB", "Trial returned negative value.");
                ChangeStateTo(stateDone%);
            else
                ' This is probably where Trial can say to skip second sound
                rgLogStatus("TrialSoundB", "Trial returned unknown value (>0).");
                ChangeStateTo(stateDone%);
            endcase
            
        case iState% = stateSoundBPlaying% then
            
            if PlayWaveStatus$() = "" then
                rgLogStatus("WaitTrialSoundB", "Sound done playing.");
                ChangeStateTo(stateTrainingReward%);
            endif
            
        case iState% = stateTrainingReward% then
            
            ' Are we giving free rewards? If we are, then do so, otherwise we just pass on through. 
            if rgTrainingRewardCheck% = 1 then
                rgLogStatus("TrainingReward", "Giving training reward size " + str$(rgTrainingRewardSize%));
                if Testing%() = 0 then
                    tdtREWARD%(rgTrainingRewardSize%);
                endif
            else
                rgLogStatus("TrainingReward", "No free reward.");
            endif
            ChangeStateTo(stateInResponseWindow%);
            
        case iState% = stateInResponseWindow% then
            
            if Testing%() = 0 then
                stmp% := recLeverDown%();
            else
                ' TODO: might want to simulate HIT and MISS here.....For now only HIT when testing. 
                stmp% := 0;
            endif
            docase
            case stmp% < 0 then
                rgLogError("WaitLvrUp", "ERROR (" + str$(stmp%) + ")in recLeverDown()");
                ChangeStateTo(stateDone%);
            case stmp% = 0 then
                SampleKey("R");  'not in Recgen.pls!
                rgLogStatus("WaitLvrUp", "Lever is up - HIT");
                TrialComplete%(1, 1);
                ChangeStateTo(stateResponseReward%);
            else
                if tNow - tStateStart > rgMaxLvrUpTime then
                    rgLogStatus("WaitLvrUp", "Lever not up - timed out - MISS");
                    TrialComplete%(1, 0);
                    ChangeStateTo(stateResponseWindowTimeout%);
                endif
            endcase
            
        case iState% = stateResponseWindowTimeout% then
            
            if tNow - tStateStart > rgLvrUpTimeout then
                rgLogStatus("LvrUpTimeout", "Timeout period done.");
                ChangeStateTo(stateInitializeTrials%);
            endif
            
        case iState% = stateFalsePositive% then
            
            if tNow - tStateStart > rgFalsePositiveTimeout then
                rgLogStatus("FalsePositiveTimeout", "Timeout period done.");
                ChangeStateTo(stateInitializeTrials%);
            endif
            
        case iState% = stateResponseReward% then
            
            if rgLongRewardCheck% = 1 then
                rgLogStatus("LvrUpReward", "(long)) Reward size=" + str$(rgLongRewardSize%));
                if Testing%() = 0 then
                    tdtREWARD%(rgLongRewardSize%);
                endif
            endif
            ChangeStateTo(stateInitializeTrials%);
            
        case iState% = stateDone% then
            
            rgLogStatus("Done", "");
            Stop%();
            iStatus% := 0;
            
        else
            
            rgLogStatus("UNKNOWN STATE", "iState%=" + str$(iState%));
            Message("Unknown state (%d)!", iState%);
            Stop%();
            iStatus% := 0;
            
        endcase
        
    wend  'close the iLoop% while
    
    
    return iStatus%;
end

