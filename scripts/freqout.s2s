' File system reference vars. Each var is a directory path, WITHOUT the trailing slash. 
var bin$, script$, stim$;
script$ := View(App(3)).FileName$(1) + View(App(3)).FileName$(2);	' folder containing this script
bin$ := View(App(3)).FileName$(1) + View(App(3)).FileName$(2) + "..\\bin";	' Location of executables is ..\bin, relative to script dir
stim$ := View(App(3)).FileName$(1) + View(App(3)).FileName$(2) + "..\\stim";	' Location of stimuli is ..\stim, relative to script dir

var StimSetSpecFile$;       ' The file containing the stimuli specifications - selected by user. 
var StimSetID$;             ' basename of stim set spec file (without the .txt and dir)
var freqOutput%;            ' output sampling freq - from spec file
var sampleSeconds;          ' length of samples in seconds
var sampleExpectedLength%;  ' freqOutput% * sampleSeconds

const maxStim% := 20;                   ' max number of stim
const maxStimLength% := 50000;          ' max number of samples in a stim
var stim0%[maxStim%][maxStimLength%];   ' These stim will be played on dac out 0
var stim1%[maxStim%][maxStimLength%];   ' these will be played on dac out 1
var stimS0%[maxStimLength%];             ' Standard stim
var stimS1%[maxStimLength%];             ' Standard stim
var stimCount% := 0;        ' Number of stim in stimN arrays
var stimTrialCount%[maxStim%];              ' Number of complete trials for each stim
var stimTrialCompleteRounds%;           ' Number of complete rounds of trials thus far
var stimCurrentIndex%;                  ' stim being used for current trial

' Control variables
var isPaused% := 0;           ' set to 1 when paused
var CompleteTrialsRequired% := 0;       ' Number of complete trials of each stim type required
var UseCorrectionTrials% := 0;  ' if 1, require complete trials to be correct also

' Channel numbers
var ElectrodeChannel% := 1;
var XChannel% := 2;
var YChannel% := 3;

' prompt user to select stim set for processing.....

if SelectStimSet%(stim$, StimSetSpecFile$)<0 then
    halt
else
    if LoadSpecFile%(StimSetSpecFile$) < 0 then
        Message("Cannot load spec file " + StimSetSpecFile$);
        halt
    endif
endif

' Stimuli are loaded. Extract stim set ID
StimSetID$ := Left$(StimSetSpecFile$, InStr(StimSetSpecFile$, "."));
if Len(StimSetID$) = 0 then
    PrintLog("Error in stim set filename - no dot!!!\n");
    halt;
else
    PrintLog("\n\n--------------------------------------------------------\n\n");
    PrintLog("Stim set " + StimSetID$ + "\n");
    PrintLog("Output frequency:  " + str$(freqOutput%) + "\n");
    PrintLog("Sample seconds:    " + str$(sampleSeconds) + "\n");
    PrintLog("Number of stimuli: " + str$(stimCount%) + "\n");
endif

' Initialize trial counters
ArrConst(stimTrialCount%[], 0);


' parameters
if FreqoutParametersDialog%() = 0 then
    halt;
endif

 
' Sampling configuration
'CreateSampleConfiguration();

' Prepare toolbar
InitializeToolbar();



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'proc CreateSampleConfiguration()
'	var index;
'	SampleClear(); 'Set standard sampling state
'	SampleAutoComment(0); 'Prompt for comment after sampling
'	SampleAutoCommit(60); 'Seconds between each file commit
'
'	SampleWaveMark(ElectrodeChannel%, 0, 2000, 34, 15, 28000); ' chan, port, event rate, points, pre-trigger, rate
'	SampleTitle$(ElectrodeChannel%, "Electrode")); 
'
'	'EYE COIL CHANNELS. Last # is sampling freq in Hz. 
'	SampleWaveform(XChannel%, 6, 1000);
'	SampleTitle$(XChannel%,"Eye X");
'	SampleWaveform(YChannel%, 7, 1000);
'	SampleTitle$(YChannel%, "Eye Y");
'
'	SampleSequencer(script$ + "Freqout.pls");
'	SampleOptimise(2, 2, 2, 2, 50);  'Set optimise mode (do this last)
'	SampleMode(1); 'Continuous sampling
'end;



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' prompts user to select a stim set spec file from the folder stimFilePath$.
' Returns 0 on success, -1 on failure. 
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func SelectStimSet%(stimFilePath$, &specFile$)

    ' scan for txt files
    var txtFiles$[100];
    var count%:=0;
    var i%;
    var sp% := 1;
    var status%;
    FilePathSet(stimFilePath$);
    count% := FileList(txtFiles$, 1);

    PrintLog("Found " + str$(count%) + " txt files.\n");

    DlgCreate("Select stim set");
    DlgList(1, "Stim set:", txtFiles$, count%);
    DlgInteger(2, "# complete trials for each stim", 1, 100, 0, 0, sp%);
    DlgCheck(3, "Use correction trials?");
    status% := DlgShow(i%, CompleteTrialsRequired%, UseCorrectionTrials%);
    if (status% = 1) then
        specFile$ := txtFiles$[i%];
    else
        return -1;
    endif

    return 0;
end


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' Load stimuli from the file file$. Returns 0 on success, or -1 if an error was 
' encountered.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func LoadSpecFile%(file$)
var handle;

PrintLog("Load spec file " + file$ + "\n");
handle := FileOpen(file$, 8, 0);
if (handle < 0) then
    PrintLog("Cannot open file " + file$ + "\n");
    return -1;
endif

' file is opened, read line by line

var line$;              ' lines read into this string
var linesRead% := 0;    ' # of lines read. 
var rcount%;
var headerLineFound% := 0;  
var standardStimFound% := 0;    
var errFlag% := 0;



while Read(line$)>=0 do
    linesRead%+=1;
    
    ' is it a comment?
    if InStr(line$, "#") <> 1 then
        ' if header hasn't been read yet, then this is it
        if headerLineFound% = 0 then
            if (ReadStr(line$, freqOutput%, sampleSeconds) = 2) then
                headerLineFound% := 1;
                PrintLog("Found header: freqOutput = " + str$(freqOutput%) + " seconds = " + str$(sampleSeconds) + "\n");
                sampleExpectedLength% := freqOutput% * sampleSeconds;
            else
                PrintLog("ERROR at line " + str$(linesRead%) + ": expected header.\n");
            endif
        else
            ' header line has been found, so we're expecting a line that
            ' specifies a stimulus. Check that the line contains "|".
            var iSep%;
            var sStims$[10];
            var nStims%;
            var iStim%;
            var tmpStim0Size%;
            var tmpStim1Size%;
            
            ReadSetup(""," ","",""," ,");
            
            iSep% := InStr(line$, "|");            
            if iSep% = 0 then
'                PrintLog("SKIP line " + str$(linesRead%) + ": no separator \"|\"\n");
                PrintLog("SKIP line " + str$(linesRead%) + ": no separator |\n");
            else
                ' read stims for chan 0 from line$
                nStims% := ReadStr(Mid$(line$, 1, iSep%-1), sStims$);
                    
                if standardStimFound% = 0 then
                        
                    ' Read standard stim for chan 0
                    tmpStim0Size% := LoadStim%(sStims$, nStims%, stimS0%[], maxStimLength%);
                    if (tmpStim0Size% < 0) then
                        PrintLog("Error: Cannot load standard stim from line " + str$(linesRead%) + "\n");
                        errFlag% := 1;
                    endif
                                    
                    ' Read standard stim for chan 1
                    nStims% := ReadStr(Mid$(line$, iSep%+1), sStims$);
                    tmpStim1Size% := LoadStim%(sStims$, nStims%, stimS1%[], maxStimLength%);
                    if (tmpStim1Size% < 0) then
                        PrintLog("Error: Cannot load standard stim from line " + str$(linesRead%) + "\n");
                        errFlag% := 1;
                    endif
                        
                    standardStimFound% := 1;
                else
                        
                    tmpStim0Size% := LoadStim%(sStims$, nStims%, stim0%[stimCount%][], maxStimLength%);
                    if (tmpStim0Size% < 0) then
                        PrintLog("Error: Cannot load stim0 from line " + str$(linesRead%) + "\n");
                        errFlag% := 1;
                    endif
                                    
                    ' read stims for chan 1 from line$
                    nStims% := ReadStr(Mid$(line$, iSep%+1), sStims$);
                    tmpStim1Size% := LoadStim%(sStims$, nStims%, stim1%[stimCount%][], maxStimLength%);
                    if (tmpStim1Size% < 0) then
                        PrintLog("Error: Cannot load stim1 from line " + str$(linesRead%) + "\n");
                        errFlag% := 1;
                    endif
                        
                    stimCount% += 1;
                endif
                
            endif
            ReadSetup();
        endif
    endif
    
    wend;
    
    FileClose();
    
    ' Check that there were no errors, and that the standard stim was found, and that
    ' at least one additional stim was found....
    var i% := 0;
    if headerLineFound% = 0 then
        i% := -1;
        PrintLog("Error reading spec file - no header line found!\n");
    else 
        if standardStimFound% = 0 then
            i% := -1;
            PrintLog("Error reading spec file - standard stim not found!\n");
        endif
        if stimCount% = 0 then
            i% := -1;
            PrintLog("Error reading spec file - no stims found!\n");
        endif
    endif
    return i%;
end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' LoadStim
'
' Loads a stimulus by reading files and concatenating them into the array provided. 
' The string array should contain the basenames of the stim files - in other words these
' strings, with ".bin" appended should be a file in the current directory. The number
' of stim files can vary between stimuli; n% files will be read and loaded here. 
' The array stim% will be filled with at most maxSamples% samples. The return value is 
' the number of samples loaded, or -1 on error (most likely the file could not be found).
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


func LoadStim%(s$[], n%, stim%[], maxSamples%)

var i%;
var icount%:=0;
var iread%:=0;
var totalSamples% := 0;
var saveHandle;
var stimHandle;
var f$;

saveHandle := View();

for i% := 0 to n%-1 do
    
    ' Open stim file
    iread% := 0;
    icount% := 0;
    f$ := s$[i%]+".bin";
    stimHandle := FileOpen(f$, 8, 0);
    if (stimHandle < 0) then
        PrintLog("LoadStim: Cannot open file " + f$ + "\n");
        return -1;
    else
        ' read stim file - expect one number per line
        while (icount% >= 0 and totalSamples%+iread% < maxSamples%) do
            icount% := Read(stim%[iread%]);
            if (icount% = 1) then iread% += 1; endif;
            wend;
        FileClose();
        PrintLog("Read " + str$(iread%) + " values from file " + f$ + "\n");
        totalSamples% += iread%;
    endif
    
    next;

View(saveHandle);

return totalSamples%;
end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' InitilizeToolbar - prepare toolbar buttons. 
' Note that the idle processing function (ToolbarSet(0, blah, blah)) is 
' not set here. That's done when the user hits the start button.
'
proc InitializeToolbar()
	View(App(8)).WindowVisible(0);	'Hide the standard sample bar
	ToolbarVisible(1);
	ToolbarSet(1,"Start",Start%);
	ToolbarSet(2,"Stop", Stop%);
	ToolbarSet(3,"Pause",Pause%);
	ToolbarSet(4,"Resume",Resume%);
	ToolbarSet(5,"Reward",Reward%);
	ToolbarEnable(2,0);
	ToolbarEnable(3,0);
	ToolbarEnable(4,0);
	ToolbarEnable(5,1);
	Toolbar("Go", 0x3ff);
end;

func Start%()
    ToolbarSet(0, "", StateProcessor%);
    ToolbarEnable(1, 0);
    ToolbarEnable(2, 1);
    ToolbarEnable(3, 1);
    ToolbarText("Running....");
    return 1;
end;

func Stop%()
    SampleStop();
    ToolbarSet(0, "");
    return 0;
end;

func Pause%()
    isPaused% := 1;
    ToolbarEnable(3, 0);
    ToolbarEnable(4, 1);
    ToolbarText("Paused....");
    return 1;
end;

func Resume%()
    isPaused% := 0;
    ToolbarEnable(3, 1);
    ToolbarEnable(4, 0);
    ToolbarText("Running....");
    return 1;
end;

func Reward%()
    return 1;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' EyePos
' 
' Determines eye position. 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func EyePos(&x, &y)
    var returnValue% := 0;
    return returnValue%;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Get Current configuration START
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func GetCurrentConfiguration$()
	var key$;
	var s$;
	key$:="Reclab";
	Profile(key$, "CurrentConfiguration", "default", s$);
	return s$;
end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' Freqout parameters START
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

var WindowRadius;
var FixationTime;
var AcquisitionTime;
var ResponseTime;
var FixationX;
var FixationY;

proc GetFreqoutParameters()
	var stmp$;
	var key$;
	key$ := "Reclab\\" + GetCurrentConfiguration$() + "\\Freqout";
	Profile(key$, "WindowRadius", "2.0", stmp$);
    WindowRadius := val(stmp$);
	Profile(key$, "FixationX", "0.0", stmp$);
    FixationX := val(stmp$);
	Profile(key$, "FixationY", "0.0", stmp$);
    FixationY := val(stmp$);
    Profile(key$, "AcquisitionTime", "1.0", stmp$);
    AcquisitionTime := val(stmp$);
    Profile(key$, "FixationTime", "1.0", stmp$);
    FixationTime := val(stmp$);
    Profile(key$, "ResponseTime", "1.0", stmp$);
    ResponseTime := val(stmp$);
end;

proc SaveFreqoutParameters()
	var key$;
	key$ := "Reclab\\" + GetCurrentConfiguration$() + "\\Freqout";
	Profile(key$, "WindowRadius", str$(WindowRadius));
	Profile(key$, "FixationX", str$(FixationX));
	Profile(key$, "FixationY", str$(FixationY));
    Profile(key$, "AcquisitionTime", str$(AcquisitionTime));
    Profile(key$, "FixationTime", str$(FixationTime));
    Profile(key$, "ResponseTime", str$(ResponseTime));
end;


func FreqoutParametersDialog%()

	var i%;
	GetFreqoutParameters();
	DlgCreate("Freqout parameters: " + GetCurrentConfiguration$(), 25, 10);
	DlgReal(1, "Fixation X:", -40, 40);
	DlgReal(2, "Fixation Y:", -40, 40);
	DlgReal(3, "Window radius:", .1, 10);
	DlgReal(4, "Acquisition time(s):", .1, 30);
	DlgReal(5, "Fixation time(s):", .1, 30);
	DlgReal(6, "Response time(s):", .1, 30);
    
	i% := DlgShow(FixationX, FixationY, WindowRadius, AcquisitionTime, FixationTime, ResponseTime);	

	' If user cancelled, reload params
	if i% = 0 then
		GetFreqoutParameters();
	else
		SaveFreqoutParameters();
	endif

	return 1;
end;



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' State variables
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


' State name constants
const stateStartTrial% := 1;
const stateError% := 98;
const stateDone% := 99;
const stateWaitForAcquisition% := 2;
const stateWaitForFixation% := 3;
const stateFailAcquisition% := 4;
const stateFailFixation% := 5;
const stateMaintainFixation% := 6;
const stateWaitForResponse% := 7;
const stateCorrectResponse% := 8;
const stateIncorrectResponse% := 9;
const statePlayStandardStim% := 21;
const stateWaitStandardStim% := 22;
const statePause1 := 23;
const statePlayStim% := 24;
const stateWaitStim% := 25;
const statePause2 := 26;

var iCurrentState% := stateStartTrial%;
var tNow := -1;
var tLast:= -1;
var tStateStart := -1;
var TrialStimIndex% := -1;
var TrialStimIndexHeldOver% := 0;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' StateProcessor
'
' Handles state logic for the paradigm. 
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func StateProcessor%()
    var returnValue% := 1;      ' set to 0 to stop paradigm completely
    var xEye, yEye;
    var tmp%;
    
    ' if paused get out now
    if isPaused% <> 0 then
        return returnValue%;
    endif
    
    if EyePos(xEye, yEye) <> 0 then
        PrintLog("Error getting eye position!\n");
        xEye := 999999;
        yEye := 999999;
    endif
    
	tNow := MaxTime();
    
	docase 	
	case iCurrentState% = stateStartTrial% then
    
        tmp% := GetTrialStimIndex%();
        docase 
        case tmp% = 1 then
            iCurrentState% := stateDone%;
        case tmp% < 0 then
            iCurrentState% := stateError%;
        else
            ' turn on fix point and change state
            SampleKey("F");
            iCurrentState% := stateWaitForAcquisition%;
            tStateStart := tNow;
        endcase
        
    case iCurrentState% = stateWaitForAcquisition% then

        ' Check eye position. If it is within window before AcquisitionTime, 
        ' change state to stateWaitForFixation. Otherwise change state to 
        ' stateFailAcquisition.
        if tNow - tStateStart > AcquisitionTime then
            iCurrentState% := stateFailAcquisition%;
        else
            if InFixationWindow%(xEye, yEye) then
                iCurrentState% := stateWaitForFixation%;
                tStateStart := tNow;
            endif
        endif

	case iCurrentState% = stateDone% then

	case iCurrentState% = stateError% then
        
    case iCurrentState% = stateFailAcquisition% then
        
    case iCurrentState% = stateFailFixation% then
        
    case iCurrentState% = stateWaitForFixation% then
        ' Eye must stay within fixation window for FixationTime
        if tNow - tStateStart > FixationTime then
            iCurrentState% := stateMaintainFixation%;
            tStateStart := tNow;
        else
            if InFixationWindow%(xEye, yEye) = 0 then
                iCurrentState% := stateFailFixation%
            endif
        endif
        
    case iCurrentState% = stateMaintainFixation% then

    case iCurrentState% = stateWaitForResponse% then
        ' ResponseTime
    case iCurrentState% = stateCorrectResponse% then
        
    case iCurrentState% = stateIncorrectResponse% then
    
    else 

        ' Unknown state!
        Message("Unknown state=" + str$(iCurrentState%));
        halt;
    
    endcase;
    
    tLast := tNow;
    return returnValue%;
end;



' The trial stim index is selected and set in the global var TrialStimIndex%. 
' That means that the stim signal for output channel 0 (1) are in 
' stim0%[TrialStimIndex%][] (stim1%[TrialStimIndex%][]). 
' 
' There are two methods by which the stim index is chosen. 
'
' The simplest is when TrialStimIndexHeldOver% is set to 1. In this case we do nothing
' here and the trial stim index from the last trial is re-used. This happens when 
' correction trials were chosen and the last trial was a failure of some sort. The same
' trial is to be re-done until the subject gets it right. 
' 
' The other case is more complicated. The experimenter specified how many complete trials
' of each type are required (CompleteTrialsRequired%). We tally the number of complete trials for
' each type in stimTrialCount%[]. We use the var stimTrialCompleteRounds% to keep track of 
' how many times we've completed the entire set of trials. Thus, when 
' stimTrialCompleteRounds% is 1 it means that we've had one (1) complete trial of each type 
' and we're working on the second round. So to choose the next stim we run through 
' stimTrialCount%[] and gather up all the indexes (indices?) i% whose value 
' stimTrialCount%[i%] is equal to stimTrialCompleteRounds%. If there's none of those, then
' increment stimTrialCompleteRounds% and do it again. Once we've gathered a list of indices
' then generate a random number and make a choice of index. That index is the value we
' set in TrialStimIndex%.

func GetTrialStimIndex%()
    var status% := 0;
    var index% := 0;
    var j% := 0;
    var count% := 0;
    var candidateIndices%[maxStim%];

    ArrConst(candidateIndices%[], -1);
    if TrialStimIndexHeldOver% <> 1 then

        ' run through stimTrialCount% and see if we have to increment stimTrialCompleteRounds%
        for j% := 0 to (stimCount%-1) do
            if stimTrialCount%[j%] = stimTrialCompleteRounds% then
                count% += 1;
            endif
        next;

        if count% = 0 then
            ' increment stimTrialCompleteRounds%
            stimTrialCompleteRounds% += 1;
        endif
        
        ' check if we've completed all the required trials
        if stimTrialCompleteRounds% = CompleteTrialsRequired% then
            status% := 1;
        endif

        if status% = 0 then

            ' Now build a list of indices to choose from
            count% := 0;
            
            for j% := 0 to (stimCount%-1) do
                if stimTrialCount%[j%] = stimTrialCompleteRounds% then
                    candidateIndices%[count%] := j%;
                    count% += 1;
                endif
            next;
            
            ' Now if count% is 0 we have a serious problem. If not then generate
            ' a random number and use it to choose the next index.
            if count% = 0 then
                status% := -1;
            else
                index% := Rand(0, count%);      ' random value 0<=rand<count% is truncated
                TrialStimIndex% := candidateIndices%[index%];
                if TrialStimIndex% < 0 then
                    PrintLog("Bad error! TrialStimIndex% = -1!!!\n");
                    status% := -2;
                endif
            endif
        endif





    endif
end;

' TODO this proc does nothing

func InFixationWindow%(x, y)
    var in% := 0;
    
    return in%;
end;
