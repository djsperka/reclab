' $Id$


' File system reference vars. Each var is a directory path, WITHOUT the trailing slash. 
var bin$, script$;
script$ := View(App(3)).FileName$(1) + View(App(3)).FileName$(2);	' folder containing this script
bin$ := View(App(3)).FileName$(1) + View(App(3)).FileName$(2) + "..\\bin";	' Location of executables is ..\bin, relative to script dir


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Get Current configuration START
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func GetCurrentConfiguration$()
	var key$;
	var s$;
	key$:="Reclab";
	Profile(key$, "CurrentConfiguration", "default", s$);
	return s$;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Get Current configuration END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Data parameters START
'
'	Vars that control where data is stored. 
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

var dataPathRoot$;		' base path for data storage
var dataDataSet$;		' folder under data path where data files placed
var dataCellName$;		' part of base name for all data files
var dataDataSetTextItem%;	' 

proc GetDataParameters()
	var stmp$;
	var key$;

	key$:="Reclab\\Data";

	Profile(key$, "PathRoot", "C:\\data", dataPathRoot$);
	Profile(key$, "DataSet", "", dataDataSet$);
	Profile(key$, "CellName", "", dataCellName$);
	return;
end;



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' Data parameters END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' Start here. 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

' Experimental parameters

var tAcquisition;                   ' time allowed for subject to get in fixation window -- "acquire" the target
var tFixation;                      ' time after acquisition before we consider subject "fixated"
var xFixation, yFixation;           ' xy of fixation point
var wFixation;                      ' fixation window
var tMaintain;                      ' must maintain fixation for this long
var iStimCues%;                     ' will stim cues be used - usage undetermined at this point
var tResponse;                      ' time allowed for subject to respond
var tPunish;                        ' wait period after incorrect response

var xTargetL, yTargetL;             ' left answer target coordinates
var xTargetR, yTargetR;             ' right answer target coordinates
var wTargetL, wTargetR;             ' target windows


' Channel numbers
var NumberOfElectrodes% := 1;
var XChannel%;
var YChannel%; 

' Window handles
var DataWindow%;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

proc GetFreqoutScriptParameters()
	var stmp$;
	var key$;
	key$:="Reclab\\" + GetCurrentConfiguration$() + "\\Scripts\\Freqout";

	Profile(key$, "tAcquisition", "2.0", stmp$);
	tAcquisition := val(stmp$);
	Profile(key$, "tFixation", "2.0", stmp$);
	tFixation := val(stmp$);
	Profile(key$, "xFixation", "2.0", stmp$);
	xFixation := val(stmp$);
	Profile(key$, "yFixation", "2.0", stmp$);
	yFixation := val(stmp$);
	Profile(key$, "tMaintain", "2.0", stmp$);
	tMaintain := val(stmp$);
	Profile(key$, "tResponse", "2.0", stmp$);
	tResponse := val(stmp$);
	Profile(key$, "tPunish", "2.0", stmp$);
	tPunish := val(stmp$);
end;

proc SaveFreqoutScriptParameters()
	var key$;
	key$:="Reclab\\" + GetCurrentConfiguration$() + "\\Scripts\\Freqout";
	Profile(key$, "tAcquisition", str$(tAcquisition));
	Profile(key$, "tFixation", str$(tFixation));
    Profile(key$, "xFixation", str$(xFixation));
    Profile(key$, "yFixation", str$(yFixation));
	Profile(key$, "tMaintain", str$(tMaintain));
	Profile(key$, "tResponse", str$(tResponse));
	Profile(key$, "tPunish", str$(tPunish));
end;

func FreqoutScriptDialog%()
	var i% := 0;
	GetFreqoutScriptParameters();
	DlgCreate("Experimental Parameters");
	DlgReal(1, "Acquisition time(s)", 0.1, 100);
	DlgReal(2, "Fixation time(s)", 0.1, 100);
	DlgReal(3, "Fixation X (degrees)", -90, 90);
	DlgReal(4, "Fixation Y (degrees)", -90, 90);
	DlgReal(5, "Maintain time(s)", 0.1, 100);
	DlgReal(6, "Response time(s)", 0.1, 100);
	DlgReal(7, "Punish time(s)", 0.1, 100);

	i% := DlgShow(tAcquisition, tFixation, xFixation, yFixation, tMaintain, tResponse, tPunish);
	' If i% is 1 the user hit "OK". If its 0, user hit "Cancel". 
	' When user hits OK we always save the parameters, and when user hit Cancel we don't.
	if i% = 1 then
		SaveFreqoutScriptParameters();
	endif;

    return i%;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' Load sampling configuration
' 
' The configuration file freqout.s2c also loads the sequencer file freqout.pls
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

proc SamplingConfiguration()
	var index;

'    FileOpen(script$ + "\\freqout.s2c", 6);

    SampleClear(); 'Set standard sampling state
	SampleAutoComment(0); 'Prompt for comment after sampling
	SampleAutoCommit(60); 'Seconds between each file commit

'   ports 0, 1, 2, ... are used for WaveMark channels. 
'   NumberOfElectrodes% is initialized to 1. If at some point more electrodes
'   are used, then that value should be changed - either hardcoded or via a dialog. 
'   Also, be aware that the Power 1401 has only 8 ADC inputs. Two (ports 6 and 7) are
'   taken up by the 

	for index := 1 to NumberOfElectrodes% do
		SampleWaveMark(index, index-1, 2000, 34, 15, 28000); ' chan, port, event rate, points, pre-trigger, rate
        SampleTitle$(index, "E "+Str$(index)); 
	next

    XChannel% := NumberOfElectrodes% + 1;
    YChannel% := NumberOfElectrodes% + 2;
	SampleWaveform(XChannel%,6,1000);
	SampleTitle$(XChannel%,"Eye X");
	SampleWaveform(YChannel%,7,1000);
	SampleTitle$(YChannel%,"Eye Y");
	
	SampleSequencer(script$ + "freqout.pls");
	SampleOptimise(2,2,2,2,50);  'Set optimise mode (do this last)
	SampleMode(1); 'Continuous sampling
end;




proc InitializeWindows()

	'Open the data sampling window
	DataWindow% := FileNew(0,4);
	Window(0, 0, 100, 50);
	View(DataWindow%).WindowVisible(1);

end;



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' InitilizeToolbar - prepare toolbar buttons. Note that the idle processing function (ToolbarSet(0, blah, blah)) is 
' not set here. That's done when the user hits the start button.
'
proc InitializeToolbar()

	View(App(8)).WindowVisible(0);	'Hide the standard sample bar
	ToolbarVisible(1);
	ToolbarSet(1,"Sample start",Start%);
	ToolbarSet(2,"Sample stop", Stop%);
'	ToolbarSet(3,"Juice", Reward%);
'	ToolbarSet(4,"Pause stimuli",PauseStimuli%);
'	ToolbarSet(5,"Resume stimuli",ResumeStimuli%);
'	ToolbarSet(6,"Exp Parameters",AttentionScriptDialog%);
	ToolbarSet(7,"Quit",Quit%);
	ToolbarEnable(2,0);         ' can't stop until you've started....
'	ToolbarEnable(4,0);
'	ToolbarEnable(5,0);
    ToolbarEnable(7, 1);
	Toolbar("Go",0x3ff);

end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' Give reward. 
'
' TODO: re-implement this for reclab. 
func Reward%()
'	var i%;
'	for i%:=1 to JuicePerReward% do Yield(.05); SampleKey("J"); next
    SampleKey("J");
	return 1;
end;

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func Start%()
	
	SampleStart(0); 'Start sampling
	
	ToolbarSet(0, "", IdleProcessing%);	'Enable the IdleProcessing function
	ToolbarEnable(2,1);                 ' now you can stop
	ToolbarEnable(1,0);                 ' but you can't start again
	ToolbarEnable(7,0);                 ' No quitting anymore - data is lost !!!

    return 1;
end;

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func Stop%()

	' Disable idle process func
	ToolbarSet(0,"");
	ToolbarEnable(2,0);                 ' but you can't stop again
	SampleStop();
    return 1;

end;

' Used to hard-quit from toolbar. This will close data files without saving!!! 
' It is important that this function be disabled once sampling is started!!!

func Quit%()
	FileClose(-1,-1);
	return 0;
end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' IdleProcessing - this function is called repeatedly during sampling. 
'
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

' Constants for states
const stateStart%               := -1;
const stateSelectTrial%         := 0;
const stateFixPtOn%             := 1;
const stateWaitForAcquisition%  := 2;
const stateWaitForFixation%     := 3;
const stateMaintainFixation%    := 4;
const stateAnswerPoints%        := 5;
const stateWaitForResponse%     := 6;
const stateCorrectResponse%     := 7;
const stateIncorrectResponse%   := 8;
const stateTrialFailed%         := 9;
const stateDone%                := 10;	
var iState% := stateStart%;

var nTrialsStarted%:=0;
var nTrialsCompleted%:=0;
var nTrialsAborted% :=0;		' 

var tNow;
var xEye;
var yEye;
var tLastUpdate;
var tStateStart;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc ChangeStateTo(stateTo%, tStart)
	iState% := stateTo%;
	if tStart > 0 then tStateStart := tStart; endif;
end;



func IdleProcessing%()
    var iStatus% := 1;	
    var iExit% := 0;

    tNow := MaxTime();
	xEye := ChanMeasure(XChannel%,2,tNow-.001,tNow-.006)*DegreesPerVoltX;
	yEye := ChanMeasure(YChannel%,2,tNow-.001,tNow-.006)*DegreesPerVoltY;

	' Don't update display every time....
'	if tNow-tLastUpdate > .005 then
'		View(XYWindow%).XYAddData(1,xEye,yEye);
'		tLastUpdate := tNow;
'	endif

while iExit% = 0 do
    
	docase 
		case iState% = stateStart% then
    
            ChangeStateTo(stateSelectTrial%, tNow);

		case iState% = stateVSGWaitConfirm% then



func IdleProcessing%()

    



    return 1;
end;


' Dialog to set experimental parameters

FreqoutScriptDialog%();

' Open sampling configuration

SamplingConfiguration();

' Get display windows ready. This also opens the data file .

InitializeWindows();

' Configure toolbar

InitializeToolbar();

