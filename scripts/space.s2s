#include "recgen.s2s"
#include "triallistgen.s2s"
#include "gensound.s2s"


const spcPI := 3.141592653589793;
const spcTTMaxSpeakers% := 100;
const spcMaxTrials%        := 100;         ' Maximum number of trials per speaker.
const spcDAC0Key$        := "A";
const spcDAC0%         := 0;
const spcSoundSize%    := 33333;
const spcSampleLengthSec := 0.2;
const spcTrialListMin% := 3;                             ' min size of the trial list
const spcTrialListMax% := 7;

var spcTTSpeakers%[spcTTMaxSpeakers%];    ' speaker numbers - each is considered a trial type. Can have duplicates. 
var spcTTSpikeCounts%[spcTTMaxSpeakers%][spcMaxTrials%]; ' spike counts for completed trials on each trial type
var spcTTSpikeRate[spcTTMaxSpeakers%][spcMaxTrials%];    ' spike rates for completed trials on each trial type
var spcTTSpikeRateMean[spcTTMaxSpeakers%];' mean spike rate for each trial type
var spcTTSpikeRateStd[spcTTMaxSpeakers%]; ' std dev for above. 
var spcTTAtten[spcTTMaxSpeakers%];        ' atten to use for each speaker number in g_spcTTSpeakers%[]
var spcTTIndexBackground%;                 ' index into TT arrays which is the background speaker/atten pair. 
var spcTrialCount% := 0;                   ' overall trial counter - each trial gets a number!
var spcNTrialTypes% := 0;
var spcDAC0Rate     := 166666.6666667;
var spcSoundVolts[spcSoundSize%];
var spcSoundDAC%[spcSoundSize%];          ' 16 bit ints; -32768 to 32767. Should start/stop at 0!!!
var spcToneCopiedToPlayWaveArea% := 0;
var spcDebug% := 0;
var spcTrialList%[spcTrialListMax%];       ' The trial list is a list of speakers to use in a series
var spcTrialListFilenames$[spcTrialListMax%];   ' When noise chosen, these are filenames of noise files used
var spcNTrialList%;
var spcTrialListIndex%;

'-------- global vars RE: xy plot
var spcUnitX[16];
var spcUnitY[16];
var spcWindowData%;
var spcWindowXY%;
var spcChanTrig%;
var spcChanTrode1%;
var spcChanMean%;
var spcChanMeanPlus%;
var spcChanMeanMinus%;
var spcChanBkgd%;
var spcChanBkgdPlus%;
var spcChanBkgdMinus%;
var spcChanLines%;
var spcOutputRoot$          := "output";        ' root filename for output file
var spcNoise%               := 1;
var spcNoiseDir$            := "c:/reclab/space";
var spcNoiseMask$           := "noise*.bin";
var spcTone%                := 0;
var spcFreq%                := 20000;
var spcTrialTypesFileSelection% := 0;
var spcTrialTypesFile$      := "";
var spcTrialTypesFileList$[100];
var spcNTrialsPerStim%      := 2;
var spcBlockSize%           := 1;

const spcdlgRoot%       := 1;
const spcdlgNoise%      := 2;
const spcdlgNoiseDir%   := 3;
const spcdlgNoiseMask%  := 4;
const spcdlgTone%       := 5;
const spcdlgFreq%       := 6;
const spcdlgTTSelection%:= 7;
const spcdlgNTrials%    := 8;
const spcdlgBlockSize%  := 9;





'------- InitializeExpt% --------------------------------------------------------
'
' Called after generic dialog. Open dialog, initialize stuff specific to this expt. 
' Return 1 if all is well, 0 if user hit Cancel, or -1 to abort expt. 
'
'--------------------------------------------------------------------------------


func InitializeExpt%(debug%, wdata%, wxy%, chTrig%, chTrode%)
    var status% := 0;
    var i%;
    var ang;
    
    spcDebug% := debug%;
    spcWindowData% := wdata%;
    spcWindowXY% := wxy%;
    spcChanTrig% := chTrig%;
    spcChanTrode1% := chTrode%;
    if spcDebug% = 1 then
        gensoundSetDebug(spcDebug%);
    endif
    
    status% := SpaceScriptDialog%();
    if status% > 0 then
        ' initialize trial list generator
        tlgInit(spcNTrialTypes%, spcBlockSize%, spcNTrialsPerStim%/spcBlockSize%, spcTrialListMin%, spcTrialListMax%);

        ' Initialize PlayWave areas. The call to InitializePlayWaveAreas MUST
        ' come before the call to InitializeWindows -- that's where FileNew() is called. See Spike2
        ' docs for PlayWaveAdd(): PlayWaveAdd must be called before FileNew() for sampling window. 
        InitializePlayWaveAreas();
        
        spcChanMean% := View(spcWindowXY%).XYSetChan(0, -16, 0, 2, 8);
        spcChanMeanPlus% := View(spcWindowXY%).XYSetChan(0, -16, 0, 2, 7);
        spcChanMeanMinus% := View(spcWindowXY%).XYSetChan(0, -16, 0, 2, 7);
        spcChanBkgd% := View(spcWindowXY%).XYSetChan(0, -16, 0, 2, 0);
        spcChanBkgdPlus% := View(spcWindowXY%).XYSetChan(0, -16, 0, 2, 5);
        spcChanBkgdMinus% := View(spcWindowXY%).XYSetChan(0, -16, 0, 2, 5);
        spcChanLines% := View(spcWindowXY%).XYSetChan(0, -32, 0, 2, 20);

        for i%:=0 to 15 do
            ang := -spcPI/8*(5+i%);
            spcUnitX[i%] := cos(ang);
            spcUnitY[i%] := sin(ang);
        next

        
    endif
    return status%;
end

func InitializeTrials%()
    var status%;
    spcTrialListIndex% := 0;
    status% := PrepareTrials%();
    return status%;
end


func ExptComplete%()

    FilePathSet(data$);
    FileSaveAs(spcOutputRoot$ + ".smr", -1);
    return 0;

end

'----------- Trial%(ttype%) ----------------------------------------------------------------
'
' Initiate a trial. When ttype% = 0 this trial is an S1 trial, when ttype% = 1  its an S2 trial. 
' Return 0 if all is well, negative if not (script will exit immediately). 
'
'--------------------------------------------------------------------------------

func Trial%(ttype%)
    var status% := 0;
    docase 
    case ttype% = 0 then
        PlaySound();
    case ttype% = 1 then
        PlaySound();
    else
        LogError("Trial", "Unknown ttype (" + str$(ttype%) + ")");
        status% := -1;
    endcase
    return status%;
end

'----------- Trial%Complete(ttype%, success%) -----------------------------------
'
' Trial has ended. ttype% same meaning as for Trial%. success% 1=good, 0=bad. 
' Record text marker, analysis update. 
' Return value of -1 means an error has occurred, abort. 
' When ttype%=0, return value of 0 means continue with S1 trials, return value of 1
' means move on to S2 trial. 
' When ttype%=1 the return value (unless it is negative) is ignored. 
' 
'
'--------------------------------------------------------------------------------

func TrialComplete%(ttype%, success%)
    var status% := 0;
    var strtmp$;
    docase
    case ttype% = 0 then
        if success% = 1 then
            ' Record completed trial here, and update online analysis. 
            strtmp$ := Print$("E,%d", spcTrialCount%);
            SampleText(strtmp$, -1);
            tlgTrialIndexCompleted(spcTrialList%[spcTrialListIndex%]);
            UpdateOnlineAnalysis();
            spcTrialListIndex% += 1;
            if spcTrialListIndex% = spcNTrialList% then
                status% := 1;
            endif
        else
            strtmp$ := Print$("F,%d", spcTrialCount%);
            SampleText(strtmp$, -1);
        endif
    case ttype% = 1 then
        if success% = 1 then
            strtmp$ := Print$("H,%d", spcTrialCount%);
            SampleText(strtmp$, -1);
        else
            strtmp$ := Print$("M,%d", spcTrialCount%);
            SampleText(strtmp$, -1);
        endif
    else
        LogError("TrialComplete", "Unknown ttype (" + str$(ttype%) + ")");
        status% := -1;
    endcase
    return status%;
end


'-------- space1g configuration dialog ---------------------------------------


proc SpaceScriptDialogSaveParams()
	var stmp$;
	var key$;

	key$:="Reclab\\Space";
	Profile(key$, "OutputRoot", spcOutputRoot$);
	Profile(key$, "NoiseCheck", spcNoise%);
	Profile(key$, "NoiseDir", spcNoiseDir$);
	Profile(key$, "NoiseMask", spcNoiseMask$);
	Profile(key$, "ToneCheck", spcTone%);
	Profile(key$, "ToneFreq", spcFreq%);
    Profile(key$, "TrialTypesFileSelection", spcTrialTypesFileSelection%);
	Profile(key$, "NTrialsPerStim", spcNTrialsPerStim%);
	Profile(key$, "StimBlockSize", spcBlockSize%);
	return;
end

proc SpaceScriptDialogGetParams()
	var stmp$;
	var key$;

    key$:="Reclab\\Space";
	Profile(key$, "OutputRoot", spcOutputRoot$, spcOutputRoot$);
	Profile(key$, "NoiseCheck", spcNoise%, spcNoise%);
	Profile(key$, "NoiseDir", spcNoiseDir$, spcNoiseDir$);
	Profile(key$, "NoiseMask", spcNoiseMask$, spcNoiseMask$);
	Profile(key$, "ToneCheck", spcTone%, spcTone%);
	Profile(key$, "ToneFreq", spcFreq%, spcFreq%);
    Profile(key$, "TrialTypesFileSelection", spcTrialTypesFileSelection%, spcTrialTypesFileSelection%);
	Profile(key$, "NTrialsPerStim", spcNTrialsPerStim%, spcNTrialsPerStim%);
	Profile(key$, "StimBlockSize", spcBlockSize%, spcBlockSize%);
	return;
end



func SpaceDlgChanged%(item%)
    var status% := 1;
    var value%;

    docase 
    case item% = spcdlgNoise% then
    
        ' Get value, toggle it, and set the toggled value in Tone checkbox. 
    
        value% := DlgValue(spcdlgNoise%);
        DlgValue(spcdlgTone%, 1-value%);
        
    case item% = spcdlgTone% then

        ' Get value, toggle it, and set the toggled value in Noise checkbox. 
    
        value% := DlgValue(spcdlgTone%);
        DlgValue(spcdlgNoise%, 1-value%);
    
    endcase

    ' enable or disable frequency box as needed
    DlgEnable(DlgValue(spcdlgTone%), spcdlgFreq%);
    DlgEnable(DlgValue(spcdlgNoise%), spcdlgNoiseDir%);
    DlgEnable(DlgValue(spcdlgNoise%), spcdlgNoiseMask%);

    return status%
end



func SpaceScriptDialog%()
    var i%;
    var status% := 0;
    var sFileCount% := 0;
    var sFileMask$ := "spc*.txt";
    var pathTemp$;
    
    ' Fetch parameters from registry
    
    SpaceScriptDialogGetParams();

    ' Get file list for trial types. If no files are found in stim$ matching the mask, 
    ' show a message and quit. 
    FilePathSet(stim$);
    sFileCount% := FileList(spcTrialTypesFileList$, -1, sFileMask$);
    if sFileCount% = 0 then
        Message("There are no files in dir %s matching the mask %s", stim$, sFileMask$);
        return 0;   ' will look as if user hit Cancel
    endif
    
    ' Generate the dialog
    
	DlgCreate("Space1g Parameters", 25, 10);
    DlgString(spcdlgRoot%, "Output file root|Base name of output file, e.g. a022098a", 32, "a-zA-Z0-9_-");
    DlgCheck(spcdlgNoise%, "Noise");
    DlgString(spcdlgNoiseDir%, "Noise file dir:", 255, "a-zA-Z0-9_-:/\\.");
    DlgString(spcdlgNoiseMask%, "Noise file mask:", 255, "a-zA-Z0-9_-*?.");
    DlgCheck(spcdlgTone%, "Tone");
    DlgInteger(spcdlgFreq%, "Frequency(Hz)", 1, 100000);
    DlgList(spcdlgTTSelection%, "Stim set:", spcTrialTypesFileList$, sFileCount%);
    DlgInteger(spcdlgNTrials%, "# trials per stim", 1, 20, 0, 0, 1);
    DlgInteger(spcdlgBlockSize%, "block size", 1, 5, 0, 0, 1);

    DlgButton(1, "OK", SpaceCheckOK%);
    DlgButton(0, "Cancel");
    DlgAllow(0, 0, SpaceDlgChanged%);

    ' Show the dialog. 

	i%:=DlgShow(spcOutputRoot$, spcNoise%, spcNoiseDir$, spcNoiseMask$, spcTone%, 
                spcFreq%, spcTrialTypesFileSelection%, spcNTrialsPerStim%, spcBlocksize%);

    ' If user hit OK then save parameters (and return 1). 

	if i% = 1 then
        SpaceScriptDialogSaveParams();
        status% := 1;
    else
        status% := 0;
    endif
    
    ' If debug was set, then turn on debugging for supporting scripts
'    if spcDebug% = 1 then
'        gensoundSetDebug(spcDebug%);
'    endif

	return status%;
end;



func SpaceCheckOK%()
    var status% := 0;
    var o$;
    var dummy$;
    var i1%;
    var i2%;

    ' Verify that output root is not null
    o$ := DlgValue$(spcdlgRoot%);
    if len(o$) = 0 then
        Message("Please enter an output root.");
        status% := 1;
    endif

    ' See if output file(s) already exist. 
    
    FilePathSet(data$);
    if FileList(dummy$, -1, o$ + ".*")>0 then
        Message("Data files with this name (" + o$ + ") already exist.\nTry another name.");
        status% := 1;
    endif

    ' Check that spcNTrialsPerStim% is a multiple of spcBlockSize%
    i1% := DlgValue(spcdlgNTrials%);
    i2% := DlgValue(spcdlgBlockSize%);
    if i1% mod i2% <> 0 then
        Message("NTrialsPerStim must be a multiple of block size!");
        status% := 1;
    endif

    ' Now open and load trial types file.
    
    i1% := DlgValue(spcdlgTTSelection%);
    spcTrialTypesFile$ := spcTrialTypesFileList$[i1%];
    FilePathSet(stim$);    
    if LoadTrialTypes%(spcTrialTypesFile$) <= 0 then
        Message("Cannot load trial types file " + spcTrialTypesFile$);
        status% := 1;
    endif
    PrintLog("Loaded %d trial types from %s\n", spcNTrialTypes%, spcTrialTypesFile$);


    ' If noise is selected, init the random noise selection and ensure there are enough files
    if DlgValue(spcdlgNoise%) = 1 then
        var ntemp%;
        spcNoiseDir$ := DlgValue$(spcdlgNoiseDir%);
        spcNoiseMask$ := DlgValue$(spcdlgNoiseMask%);
        gensoundSetDebug(1);
        ntemp% := gensoundInitRandomList%(spcNoiseDir$, spcNoiseMask$);
        if ntemp% = 0 then
            Message("No noise files found in dir " + spcNoiseDir$ + " using mask " + spcNoiseMask$);
            status% := 1;
        else
            if ntemp% < (spcNTrialsPerStim%*spcNTrialTypes%) then
                if Query("Found just " + str$(ntemp%) + " noise files in dir " + spcNoiseDir$ + " using mask " + 
                        spcNoiseMask$ + ". With " + str$(spcNTrialsPerStim%) + " trials per stim, and with " + 
                        str$(spcNTrialTypes%) + " trial types loaded from " + spcTrialTypesFile$ + " there will be repeats. Continue?") = 0 then
                    status% := 1;
                endif
            endif
        endif
    endif
    
    return status%;
end


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' LoadTrialTypes%() - open and read trial types file. 
' Expecting format with two numbers per line:
' spk atten
' where spk is speaker number and atten is attenuation
' The last entry is treated as background in the online analysis!!! It doesn't matter what speaker it is. 
' Lines that start with "#" are ignored. Blank lines are ignored too. 
' Will load array g_spcTTSpeakers%[g_spcTTMaxSpeakers%] and g_spcTTAtten[g_spcTTMaxSpeakers%], 
' and will set spcNTrialTypes% to be the number of speaker/atten pairs read. 

func LoadTrialTypes%(sTTFile$)
    var handle;
    var line$;
    var count% := 0;
    
    ' open file
    handle := FileOpen(sTTFile$, 8, 0);
    if handle = 0 then
        PrintLog("Cannot open trial types file " + sTTFile$ + "\n");
        return -1;
    endif
    
    ' Now read a line at a time, discard any that begin with #
    while Read(line$)>=0 do
        ' is it a comment?
        if InStr(line$, "#") <> 1 then
            if (ReadStr(line$, spcTTSpeakers%[count%], spcTTAtten[count%]) = 2) then
                count% := count% + 1;
            endif
        endif
    wend
    spcNTrialTypes% := count%;
    spcTTIndexBackground% := count%-1;
    
    FileClose();
  
    return count%;
end

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' InitializePlayWaveAreas - add play wave areas for sounds. 
' If TONE was chosen (spcTone% = 1) then we need just one area = "A".
' If NOISE was chosen (spcNoise% = 1) then we need to allocate gtriallistMax%
' areas "A", "B", ....

Proc InitializePlayWaveAreas()
    var st;
    var i%;
    if spcTone% = 1 then
    
        st := PlayWaveAdd(GetPlayWaveKey$(0), GetPlayWaveKey$(0), spcDAC0%, spcDAC0Rate, spcSoundSize%);
        if st < 0 then
            Message("Error in PlayWaveAdd for area " + GetPlayWaveKey$(0));
            halt;
        else
            PlayWaveTrigger(GetPlayWaveKey$(0), 1);
        endif

    else
    
        for i% := 0 to spcTrialListMax% do
        
            st := PlayWaveAdd(GetPlayWaveKey$(i%), GetPlayWaveKey$(i%), spcDAC0%, spcDAC0Rate, spcSoundSize%);
            if st < 0 then
                Message("Error in PlayWaveAdd for area " + GetPlayWaveKey$(i%));
                halt;
            else
                PlayWaveTrigger(GetPlayWaveKey$(i%), 1);
            endif        
        
        next

    endif

end

func GetPlayWaveKey$(index%)

    return Chr$(Asc(spcDAC0Key$)+index%);
    
end


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' PrepareTrials%()
'
' Prepares a list of trials to run and copies data to DAC PlayWave areas if needed. 
' The list may be from 3-7 trials long. When user has chosen TONE, there's just
' one sound. When NOISE is selected, we allocate gtrialListMax% areas. 
' TODO: There is a limit to how much memory can be allocated to the PlayWave areas. 
' Should check this and return an error!?!
' Returns 0 when all trials are done, 1 if a trial set is ready to go.

func PrepareTrials%()

    var i%;
    var nread%:= 0;
    var file$;
    var swapIndex% := -1;

    ' Get the trial list, then check if we're done. If so, return now, don't do the 
    ' rest of the stuff here since there's nothing to do. 
    spcNTrialList% := tlgGetTrialList%(spcTrialList%[]);
    if spcNTrialList% = 0 then
        return 0;
    endif
    
    ' Check that the last trial in the list is NOT the background trial index. If it is, then 
    ' swap it with one of the other non-background trial indices.

    if spcTrialList%[spcNTrialList%-1] = spcNTrialTypes%-1 then
    
        PrintLog("Last trial in list is background. Fixing...\n");
        
        ' GREGG: should this start at 0 or 1? Is it OK for the first trial to be background? 
        while i%<spcNTrialList%-2 and swapIndex% < 0 do
            if spcTrialList%[i%] <> spcTrialList%[spcNTrialList%-1] then
                swapIndex% := i%;
            endif
            i% := i%+1;
        wend
        
        ' Should never happen, but if that loop failed I'm just gonna quit. 
        ' The only way that could happen would be if the trial list generator sent back a 
        ' list consisting of nothing but the background index. As long as we request 
        ' lists with a min length > 1 that shouldn't happen, since the trial list 
        ' generator doesn't allow repeated indices. 
        if swapIndex% < 0 then
            Message("Trial list error!");
            halt;
        endif

        ' Now swap the indices and move on. 
        i% := spcTrialList%[spcNTrialList%-1];
        spcTrialList%[spcNTrialList%-1] := spcTrialList%[swapIndex%];
        spcTrialList%[swapIndex%] := i%;
        

        PrintLog("Swapped trials to fix. Trial indices: ");
        for i% := 0 to spcNTrialList%-1 do
            PrintLog("%d", spcTrialList%[i%]);
            if i% < spcNTrialList%-1 then
                PrintLog(",");
            endif
        next
        PrintLog("\n");
    endif

    if spcDebug% = 1 then
        PrintLog("TrialList ");
        for i% := 0 to spcNTrialList%-1 do
            PrintLog(str$(spcTrialList%[i%]) + " ");
        next
        PrintLog("\n");
    endif

    docase
    case spcTone% = 1 then

        ' Only need to copy tone once
        if spcToneCopiedToPlayWaveArea% = 0 then
        
            gensoundTone(spcSoundDAC%[], spcSoundSize%, spcFreq%, spcDAC0Rate);
            PlayWaveCopy(GetPlayWaveKey$(0), spcSoundDAC%[]);
            spcToneCopiedToPlayWaveArea% := 1;

        endif
        
    case spcNoise% = 1 then
    
        ' Load noise for each of the trials
        for i% := 0 to spcNTrialList%-1 do
            ArrConst(spcSoundDAC%[], 0);
            nread% := gensoundRandomFromList%(spcSoundDAC%[], spcSoundSize%, spcTrialListFilenames$[i%]);
            if spcDebug% = 1 then
                PrintLog("gensoundRandomFromList returned file$ := " + spcTrialListFilenames$[i%] + "\n");
            endif
            if (nread% <= 0) then
                Message("Error loading random sounds. Check log.");
                halt;
            endif
            if (nread% < spcSoundSize%) then
                PrintLog("WARNING: Sound file " + spcTrialListFilenames$[i%] + " has " + str$(nread%) + " samples. Expecting " + str$(spcSoundSize%) + "\n");
            endif    
            PlayWaveCopy(GetPlayWaveKey$(i%), spcSoundDAC%[]);

        next        
    endcase


    return spcNTrialList%;

end


'----------------- PlaySound ---------------------------------------------------------------
'
' PlaySound plays the sound for the trial number in spcTrialListIndex.
' If this is the repeated-last-index (if spcTrialListIndex% = spcNTrialList%)
' then play spcNTrialList%-1 sound - that makes the repeat happen.

Proc PlaySound()
    var spk%[1];
    var atten;
    var s$;
    var playInd%;
    var playChar$;

    ' Determine what sound index to play. 
    playInd% := spcTrialListIndex%;
    playChar$ := "S";
    if spcTrialListIndex% = spcNTrialList% then
        playInd% := spcNTrialList%-1;
        playChar$ := "T";
    endif

    ' Increment trial counter
    spcTrialCount% := spcTrialCount% + 1;

    ' Set speaker and atten
    recSpeaker%(spcTTSpeakers%[spcTrialList%[playInd%]]);

    atten := spcTTAtten[spcTrialList%[playInd%]] + 0.5*Floor(Rand(3, 0));
    recAtten%(atten);
    spk%[0] := spcTrialList%[playInd%];

    LogStatus("PlaySound", 
              "SPK " + str$(spcTTSpeakers%[spcTrialList%[playInd%]]) + 
              "ATT " + str$(spcTTAtten[spcTrialList%[playInd%]]) + "\n");

    ' Send sample key for the play wave area. The play wave areas are triggered, so this 
    ' command alone will NOT play the sound - the SampleKey("T") triggers it. 

    if spcTone% then
        SampleKey(GetPlayWaveKey$(0));
        ' saved string format speaker%,atten,frequency%
        s$ := Print$("%s,%d,%d,%d,%.1f,%d", playChar$, spcTrialCount%, playInd%, spcTTSpeakers%[spcTrialList%[playInd%]], atten, spcFreq%);
        SampleText(s$, -1);
    else
        SampleKey(GetPlayWaveKey$(playInd%));
        ' saved string format speaker%,atten,soundfilename
        s$ := Print$("%s,%d,%d,%d,%.1f,%s", playChar$, spcTrialCount%, playInd%, spcTTSpeakers%[spcTrialList%[playInd%]], atten, spcTrialListFilenames$[playInd%]);
        SampleText(s$, -1);
    endif
    SampleKey("T");
    
end


var tOnlineLast := -1;

proc UpdateOnlineAnalysis()
    var begSpk% := -1;
    var begBak% := -1;
    var begInd% := -1;
    var begTime := -1;
    var begTrial% := 0;
    var endSpk% := -1;
    var endBak% := -1;
    var endTime := -1;
    var endTrial% := 0;
    var haveBeg% := 0;  ' state desc. 0(1) = looking for beginning (end) of trial. 
    var markers%[4];    ' not used, actually. 
    var markerStr$;     ' text in the text marker
    var s$;
    var trcount%;
    var spk%;
    var ind%;
    var att;
    var t;
    var tindex%;
    var i%;
    var arrx[16];
    var arry[16];
    var arrxl[32];
    var arryl[32];
    var maxrate := -99999;
    
    ' Look for text marks in the observation period
    t := NextTime(30, tOnlineLast, markers%[], markerStr$);
    while (t >= 0) do
        ' determine if this is a beginning or end marker
        if (InStr(markerStr$, "S")=1) then
            if ReadStr(Mid$(markerStr$, 3), trcount%, ind%, spk%) = 3 then 
                ' Search for next trigger in trigger channel
                begTime := NextTime(spcChanTrig%, t);
                'PrintLog("Found start of trial " + str$(trcount%) + " ind, spk=" + str$(ind%) + "," + str$(spk%) + "\n");
                begTrial% := trcount%;
                begInd% := ind%;
                begSpk% := spk%;
                begTime := t;
            else 
                PrintLog("Error reading marker string at t=" + str$(t) + ": " + markerStr$ + "\n");
            endif
        endif

        if (InStr(markerStr$, "E")=1) then
            if ReadStr(Mid$(markerStr$, 3), trcount%) = 1 then 
                'PrintLog("Found end of trial " + str$(trcount%) + "\n");
                if trcount% = begTrial% then
                    endTime := t;
                    
                    ' Count up wavemarks
                    tindex% := tlgTrialIndexHowManyCompleted%(begInd%)-1;
                    spcTTSpikeCounts%[begInd%][tindex%] := View(spcWindowData%).Count(spcChanTrode1%, begTime, endTime);   
                    spcTTSpikeRate[begInd%][tindex%] := spcTTSpikeCounts%[begInd%][tindex%]/spcSampleLengthSec;
                    if (tindex% >= 1) then
                        ArrSum(spcTTSpikeRate[begInd%][0:tindex%], spcTTSpikeRateMean[begInd%], spcTTSpikeRateStd[begInd%]);
                        'PrintLog("ind, spk=" + str$(begInd%) + "," + str$(begSpk%) + " rate+-std " + 
                        '        str$(spcTTSpikeRate[begInd%]) + "+-" + str$(spcTTSpikeRateStd[begInd%]) + "\n");
                    endif
                endif
            else 
                PrintLog("Error reading marker string at t=" + str$(t) + ": " + markerStr$ + "\n");
            endif
        endif
        
        if (InStr(markerStr$, "F")=1) then
            ' F marker indicates end of the repeat/last trial of a trialList. We don't include
            ' these spikes in the averages == space1g didn't, either. 
        endif
        
        tOnlineLast := t;
        t := NextTime(30, tOnlineLast, markers%[], markerStr$);
    wend
    
    ' Update plots. WARNING: Assuming that there are 16 speakers, and there is just one background trial type -- 
    ' and that the background is the last one. 
    
    ' rate. Get max rate while we're at it. 
    ArrConst(arrx, 0);
    ArrConst(arry, 0);
    for i% := 0 to 15 do
        arrx[i%] := spcTTSpikeRateMean[i%] * spcUnitX[i%];
        arry[i%] := spcTTSpikeRateMean[i%] * spcUnitY[i%];
        if abs(spcTTSpikeRateMean[i%]) > maxrate then
            maxrate := abs(spcTTSpikeRateMean[i%]);
        endif
    next
    View(spcWindowXY%).XYAddData(spcChanMean%, arrx, arry);
    
    ' rate+std
    ArrConst(arrx, 0);
    ArrConst(arry, 0);
    for i% := 0 to 15 do
        arrx[i%] := (spcTTSpikeRateMean[i%] + spcTTSpikeRateStd[i%]) * spcUnitX[i%];
        arry[i%] := (spcTTSpikeRateMean[i%] + spcTTSpikeRateStd[i%]) * spcUnitY[i%];
    next
    View(spcWindowXY%).XYAddData(spcChanMeanPlus%, arrx, arry);

    ' rate-std
    ArrConst(arrx, 0);
    ArrConst(arry, 0);
    for i% := 0 to 15 do
        arrx[i%] := (spcTTSpikeRateMean[i%] - spcTTSpikeRateStd[i%]) * spcUnitX[i%];
        arry[i%] := (spcTTSpikeRateMean[i%] - spcTTSpikeRateStd[i%]) * spcUnitY[i%];
    next
    View(spcWindowXY%).XYAddData(spcChanMeanMinus%, arrx, arry);

    ' bkgd
    ArrConst(arrx, 0);
    ArrConst(arry, 0);
    for i% := 0 to 15 do
        arrx[i%] := spcTTSpikeRateMean[16] * spcUnitX[i%];
        arry[i%] := spcTTSpikeRateMean[16] * spcUnitY[i%];
    next
    View(spcWindowXY%).XYAddData(spcChanBkgd%, arrx, arry);

    ' bkgd+std
    ArrConst(arrx, 0);
    ArrConst(arry, 0);
    for i% := 0 to 15 do
        arrx[i%] := (spcTTSpikeRateMean[16] + spcTTSpikeRateStd[16]) * spcUnitX[i%];
        arry[i%] := (spcTTSpikeRateMean[16] + spcTTSpikeRateStd[16]) * spcUnitY[i%];
    next
    View(spcWindowXY%).XYAddData(spcChanBkgdPlus%, arrx, arry);

    ' bkgd-std
    ArrConst(arrx, 0);
    ArrConst(arry, 0);
    for i% := 0 to 15 do
        arrx[i%] := (spcTTSpikeRateMean[16] - spcTTSpikeRateStd[16]) * spcUnitX[i%];
        arry[i%] := (spcTTSpikeRateMean[16] - spcTTSpikeRateStd[16]) * spcUnitY[i%];
    next
    View(spcWindowXY%).XYAddData(spcChanBkgdMinus%, arrx, arry);

    ' lines
    ArrConst(arrxl, 0);
    ArrConst(arryl, 0);
    for i% := 0 to 15 do
        arrxl[i%*2+1] := maxrate * 1.25 * spcUnitX[i%];
        arryl[i%*2+1] := maxrate * 1.25 * spcUnitY[i%];
    next
    View(spcWindowXY%).XYAddData(spcChanLines%, arrxl, arryl);
    
end
