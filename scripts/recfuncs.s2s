' $Id: recfuncs.s2s,v 1.21 2018/12/04 18:53:45 devel Exp $

' Recfuncs are convenience functions to hide the calls to the TDT server behind calls that 
' are more practical for experimental needs. 


'#include "tdt.s2s"
#include "RegistryUtils.s2s"

' device codes for PA4 and PM1
const xbPA4DEVCODE% := 0x01;
const xbPM1DEVCODE% := 0x0F;

' xbdrv command numbers. All are same as found in xbdrv.h, with "xbcmd" prefix and "_" removed
' because spike2 doesn't like them. 
const xbcmdSNOP%				:=	0x00;
const xbcmdVERREQUEST%		:= 0x06;
const xbcmdXTRIG%				:= 0x07;
const xbcmdIDENTREQUEST%	:= 0x08;
const xbcmdHOSTRTR%			:= 0x09;
const xbcmdARBERR%			:= 0xC0;
const xbcmdHOSTERR%			:= 0xC1;
const xbcmdERRACK%			:= 0xC2;
const xbcmdSLAVEACK%			:= 0xC3;
const xbcmdHARDRST%			:= 0xC5;
const xbcmdSLAVEERR%			:= 0xC6;
const xbcmdBAUDLOCK%			:= 0xCA;
const xbcmdARBACK%			:= 0xCB;
const xbcmdARBID%				:= 0xCC;
const xbcmdARBRST%			:= 0xCD;
const xbcmdGTRIG%				:= 0xD2;
const xbcmdLTRIG%				:= 0xD3;
const xbcmdARBVERREQ%		:= 0xD4;

const xbcmdPA4ATT%			:= 0x20;

const xbcmdPM1CLEAR%        := 0x11;
const xbcmdPM1CONFIG%        := 0x12;
const xbcmdPM1SPKON%        := 0x13;
const xbcmdPM1SPKOFF%        := 0x14;
const xbcmdPM1MODE%        := 0x15;

const PM1STEREO%            := 0;
const PM1MONO%              := 1;
const PM1COMMON%            := 0;
const PM1EXCLUSIVE%         := 1;

const xbTIMEOUT%				:= 100;
const xbMAXTRYS%				:= 3;


' In XB parlance, these are "XBUS Location Numbers", or 4*(rack number) + (position number)
' reclab has 2 racks (0, 1)
var xlnFirstPA4% := -1;    'x location of first PA4 device
var xlnSecondPA4% := -1;    'x location of second PA4 device
var rackFirstPA4% := -1;    'rack of first PA4 device
var rackSecondPA4% := -1;   'rack of second PA4 device
var positionFirstPA4% := -1;  'position of first PA4 device
var positionSecondPA4% := -1;  'position of second PA4 device
var xlnPM1% := -1;    'x location of PM1 device


var recTDTCOMPort% := 3;
var recTDTBaud% := 38400;
var recTDTBits% := 8;
var recTDTParity% := 0;
var recTDTStopBit% := 1;
recTDTCOMPort% := GetIntRegistryValue%("Reclab", "UseComPort", recTDTCOMPort%);


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' recAtten
'
' Set attenuation to the value supplied. Returns 0 on success, nonzero on error (see tdtPA4Atten%). 
'
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func recAtten%(atten)
    
    return PA4Atten%(atten);
    
end


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' recAttenByID
'
' Set attenuation to the value supplied, on the PA4 device found at the x location number given.
' (whichPA4% should be xlnFirstPA4% or xlnSecondPA4%)
' Returns 0 on success, nonzero on error (see tdtPA4Atten%). 
'
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func recAttenByID%(atten, whichPA4%)
    
    if whichPA4% > -1 then
        return PA4AttenByID%(atten, whichPA4%);
    else
        return 0;  'return "success"
    endif;
    
end


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' recAttenByRackPosition
'
' Set attenuation to the value supplied, on the PA4 device found at the rack/position number given. 
' Returns 0 on success, nonzero on error (see tdtPA4Atten%). 
'
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func recAttenByRackPosition%(atten, rackNumber%, positionNumber%)
    
    return PA4AttenByRackPosition%(atten, rackNumber%, positionNumber%);
    
end



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' recSpeaker
'
' Set the speaker output on the PM1 to the speaker given. 
' Returns 0 on success, nonzero otherwise (see tdtPM1SpkOn)
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func recSpeaker%(spk%)
    
    return PM1Spkon%(spk%);
    
end



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' recReward
'
' Gives reward using Crist juicer 
' Can be changed to use either a TDT (PI2) or CED output
' Returns 0 on success, 1 or -1 otherwise, -1 means failure to communicate, 1 means unexpected value
' returned from TDT server.
'
' djs eliminated tdt functionality - always use CED. INput argument useTDT% is ignored.
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func recReward%(ms%,ms2%,type%,useTDT%)
	docase
    case type% = 0 then
        DeliverRewardCEDJuice(ms%);
		PrintLog("Juice only, type=0 \n"); '*jao 5/8/17
    case type% = 1 then
        DeliverRewardCEDStim(ms2%);
		PrintLog("Stim only, type=1 \n"); '*jao 5/8/17 
    case type% = 2 then
        DeliverRewardCEDJuiceAndStim(ms%,ms2%);
		PrintLog("Juice AND Stim, type=2 \n"); '*jao 5/8/17
    endcase
    
    
    return 0;  'there's not really a success check here, so return success
end


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' DeliverRewardCEDJuice
'
' Sends TTL pulse of desired duration to Crist juicer from CED 
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc DeliverRewardCEDJuice(iMS%)
    SampleSeqVar(1, iMS%);  'putting this before to give a bit of time in case there's no delay before SafeSampleKey
    PrintLog("Juice Reward %d\n", iMS%);
    SafeSampleKey("R");
    return;
end


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' DeliverRewardCEDStim
'
' Sends TTL pulse of 1 ms duration to Stimulator from CED, with appropriate delay
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc DeliverRewardCEDStim(iMS%)
    SampleSeqVar(9, iMS%);  'put in delay in ms
    PrintLog("Stim Reward, delay %d\n",iMS%);
    SafeSampleKey("Z");  'for "Z"ap!
    return;
end


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' DeliverRewardCEDJuiceAndStim
'
' Sends TTL pulse of desired duration to Crist juicer and pulse of 1 ms duration to Stimulator from CED 
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc DeliverRewardCEDJuiceAndStim(iMS%,jMS%)
    SampleSeqVar(1, iMS%);  'putting this before to give a bit of time in case there's no delay before SafeSampleKey
    SampleSeqVar(9, jMS%);  'put in delay in ms
    'fill seqvar 10 with difference
    if iMS% > jMS% then
        SampleSeqVar(10,iMS%-jMS%);
    else
        SampleSeqVar(10,jMS%-iMS%);
    endif;
    PrintLog("Juice Reward %d, Stim Reward Delay %d\n",iMS%,jMS%);
    SafeSampleKey("Y");  'Y was open
    return;
end



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' 
' SafeSampleKey
' 
' Calls SampleKey, but makes sure that there is no current action occurring on the sequencer
' Waits up to 5 seconds before giving up and forcing the issue
' Requires sequencer file to set and unset sequencer variable V2
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Proc SafeSampleKey(s$)
    var count% := 0;
    yield(.001);  'It takes the sequencer up to a full step to change the value of variable V2, this step is obligatory
    'printlog("Checking SampleSeqVar2 at %f\n",seconds());
    while SampleSeqVar(2) <> 0 and count% < 5000 do
        'printlog("SampleSeqVar2 NOT 0 at %f\n",seconds());
        count% += 1;
        Yield();
    wend
    'printlog("SampleSeqVar2 = 0 at %f, requesting SampleKey\n",seconds());
    SampleKey(s$);  
    'printlog("SampleKey returned at %f\n",seconds());    
    return;
end


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' recInitTDT%()
'
' Initialization of TDT rig and communications (serial line). Returns 0 on success, 
' -1 on error.
'
' The serial port must be connected to the TDT machine, and the TDT server 'tdtserv' 
' must be up and ready to receive commands when this is called. 
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func recInitTDT%()
    var status%;
    
    PrintLog("Initializing TDT.\n");
    PrintLog("Open serial connection on port %d (baud %d bits %d parity %d stopbit %d\n", recTDTCOMPort%, recTDTBaud%, recTDTBits%, recTDTParity%, recTDTStopBit%);
    status% := SerialOpen(recTDTCOMPort%, recTDTBaud%, recTDTBits%, recTDTParity%, recTDTStopBit%);
    PrintLog("SerialOpen returned " + str$(status%) + "\n");
    
    if status% = 0 then
        xbFlush();

        ' Now look for devices
        var pn% := 0; 
        var rn% := 0;
        var dev%;
        for rn% := 1 to 2 do
            for pn% := 0 to 3 do
                PrintLog("Check for device at " + str$(rn%) + "," + str$(pn%) + "\n");
                dev% := XBGetDeviceCode%(rn%, pn%);
                docase
                case dev% = xbPA4DEVCODE% and xlnFirstPA4% = -1 then  'if we haven't filled the first PA4, do so
                    xlnFirstPA4% := xbGetXLN%(rn%, pn%);
                    rackFirstPA4% := rn%;
                    positionFirstPA4% := pn%;
                    PrintLog("Found first PA4 at rack %d port %d xln %x\n", rn%, pn%, xlnFirstPA4%);
                case dev% = xbPA4DEVCODE% and xlnFirstPA4% > -1 and xlnSecondPA4% = -1 then  'if we have filled the first PA4, fill the second
                    xlnSecondPA4% := xbGetXLN%(rn%, pn%);
                    rackSecondPA4% := rn%;
                    positionSecondPA4% := pn%;
                    PrintLog("Found second PA4 at rack %d port %d xln %x\n", rn%, pn%, xlnSecondPA4%);
                case dev% = xbPM1DEVCODE% then
                    xlnPM1% := xbGetXLN%(rn%, pn%);
                    PrintLog("Found PM1 at rack %d port %d xln %x\n", rn%, pn%, xlnPM1%);
                else
                    PrintLog("Device id returned %x\n", dev%);
                endcase
            next;
        next;
    
        if xlnFirstPA4% < 0 or xlnPM1% < 0 then
            status% := -9;
        else
            status% := 0;
        endif
    endif
    return status%;
    
end

'    var status%:=0;
'    var i%;
'    
'    if tdtSerial(1, 0) < 0 then
'        Message("Error in tdtSerial. Check serial line.");
'        return -1;
'    else
'        printLog("Serial open OK\n");
'    endif
'    
'    status% := tdtPING%();
'    printLog("ping status " + str$(status%) + "\n");
'    if status% <> 0 then
'        Message("Cannot ping TDT server. Check that TDTSERV is running.");
'        return -1;
'    endif
'    
'    ' Initialize tdt stuff
'    
'    tdtPI2Clear%(1);
'    tdtPI2Outs%(1, 207);
'    tdtPI2Logic%(1, 0x00, 0x20);
'    tdtPI2OutsX%(1, 1);
'    tdtPI2OutsX%(1, 2);
'    tdtPI2writeX%(1, 1, 0);
'    tdtPI2WriteX%(1, 2, 0);
'    tdtPM1Clear%(1);
'    tdtPM1Config%(1, 1);
'    tdtPM1Mode%(1, 1);
'    tdtPA4Atten%(1, 30);
'    
'    return 0;
'end

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' isBitSet%(value%,bit%)
' 
' Function which takes a binary sum (i.e. a decimal representation of a binary number) and
' determines whether one particular bit is set or not.  This function defines bits as follows:
'
' Bit#      Binary value
'    1                  1
'    2                  2
'    3                  4
'    4                  8
'
' etc.  Take this scheme into account if your bit values do not start at 1 or decrease or whatever.
'
' Returns 1 is the bit is set, 0 if not.
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'func isBitSet%(value%,bit%)
'    const maxlen% := 31;  'integer overflow after 2^30, so we only need 31 slots (0 to 30)
'    var bits%[maxlen%];
'    var temp%;
'    var i%;
'    var keepgoing% := 1;
'
'    'There doesn't look to be an easy way of generating powers of 2, so...
'    while keepgoing% = 1 do
'        temp% := pow(2,i%);
'        if temp% >= value% then
'            keepgoing% := 0;
'        else
'            i% += 1;
'        endif;
'    wend;
'    
'    'now, go backwards, finding powers of 2
'    keepgoing% := 1;
'    while keepgoing% = 1 do
'        temp% := pow(2,i%);
'        if value% >= temp% then
'            bits%[i%] := 1;
'            value% := value%-temp%;
'        endif
'        if value% = 0 then
'            keepgoing% := 0;
'        endif;
'        i% := i%-1;
'    wend;
'    
'    return bits%[bit%-1];
'end
'
'


func xbFlush()
	var i%;
	var cmd%;
	var count%;
	var status%;
	var v%;

	cmd% := xbcmdERRACK%;
	for i% := 1 to 20 do
		SerialWrite(recTDTCOMPort%, cmd%);
	next;
	cmd% := xbcmdSNOP%;
	for i% := 1 to 20 do
		SerialWrite(recTDTCOMPort%, cmd%);
	next;

	count% := 1000;
	repeat
		count% -= 1;
		status% := SerialRead(recTDTCOMPort%, v%);
	until count% = 0 or status% = 0;

	if count% = 0 then
		PrintLog("Error - unable to flush serial line!\n");
		return -1;
	else
		return 0;
	endif
end

func xbShortForm%(xln%, cmd%)
	var i%;
	var s% := 0;
	var v%;
	var trys% := 0;
    var status% := 0;

	' attempt to send command up to xbMAXTRYS times
	repeat

		trys% += 1;

		' send xln
		status% := SerialWrite(recTDTCOMPort%, (xln% band 0x7f));

		' send number of bytes to be sent, with an extra bit (0x40) set.
		' Number of bytes is the number of command bytes + 1 
		status% := SerialWrite(recTDTCOMPort%, cmd%);

		' Wait for SLAVE_ACK
		status% := SerialRead(recTDTCOMPort%, v%);

	until trys% = xbMAXTRYS% or v% = xbcmdSLAVEACK%;

	if v% = xbcmdSLAVEACK% then
		return 0;
	else
		return 1;
	endif
    
end

func xbStandForm%(xln%, c%[], n%)
	var i%;
	var s% := 0;
	var v%;
	var trys% := 0;
    var status% := 0;

	if n% > 63 then
		PrintLog("Too many characters for standard form command (" + str$(n%) + "\n");
		return -1;
	endif

	' attempt to send command up to xbMAXTRYS times
	repeat

		trys% += 1;

		' send xln
		status% := SerialWrite(recTDTCOMPort%, (xln% band 0x7f));
		'PrintLog("write xln status=" + str$(status%) + "\n");

		' send number of bytes to be sent, with an extra bit (0x40) set.
		' Number of bytes is the number of command bytes + 1 
		v% := ((n%+1) bor 0x40);
		status% := SerialWrite(recTDTCOMPort%, (n%+1 bor 0x40));
		'PrintLog("write n status=" + str$(status%) + "\n");

		' send command bytes and checksum
		for i% := 0 to (n%-1) do
			s% += c%[i%];				' checksum
			status% := SerialWrite(recTDTCOMPort%, c%[i%]);
			'PrintLog("write (" + str$(i%) + ") status=" + str$(status%) + "\n");
		next
		status% := SerialWrite(recTDTCOMPort%, s%);
		'PrintLog("write checksum status=" + str$(status%) + "\n");

		' Wait for SLAVE_ACK
		status% := SerialRead(recTDTCOMPort%, v%);
		'PrintLog("read status=" + str$(status%) + " v=" + str$(v%) + "\n");

	until trys% = xbMAXTRYS% or v% = xbcmdSLAVEACK%;

	if v% = xbcmdSLAVEACK% then
		return 0;
	else
		return 1;
	endif
end


func xbGetXLN%(rn%, pn%)
	return rn% * 4 + pn%;
end


'This function now uses the FIRST PA4 (if there is only one PA4, this is fine)
func PA4atten%(atten)

	var cmd%[3];
	const len% := 3;
	var v%;

	cmd%[0] := xbcmdPA4ATT%;
	v% := atten*10 + 0.05;
	cmd%[1] := v% / 256;
	cmd%[2] := v% mod 256;
    
    PrintLog("Set atten to %f %x %x %x\n", atten, cmd%[0], cmd%[1], cmd%[2]);
    
  	return xbStandForm%(xlnFirstPA4%, cmd%, len%);
    
'    PrintLog("Skipping setting attenuation for amplifier debug purposes");
'    return 0;

end


'This function now uses the identified PA4.
func PA4attenByID%(atten,xlnPA4%)

	var cmd%[3];
	const len% := 3;
	var v%;

	cmd%[0] := xbcmdPA4ATT%;
	v% := atten*10 + 0.05;
	cmd%[1] := v% / 256;
	cmd%[2] := v% mod 256;
    
    PrintLog("Set atten to %f %x %x %x\n", atten, cmd%[0], cmd%[1], cmd%[2]);
    
  	return xbStandForm%(xlnPA4%, cmd%, len%);
    
'    PrintLog("Skipping setting attenuation for amplifier debug purposes");
'    return 0;

end

'This function was originally named PA4attenByID%, but it seems like that should be used by the function that uses 
'a variable xloc (single number)
func PA4attenByRackPosition%(atten, rackNumber%, positionNumber%)

	var cmd%[3];
	const len% := 3;
	var v%;

	cmd%[0] := xbcmdPA4ATT%;
	v% := atten*10 + 0.05;
	cmd%[1] := v% / 256;
	cmd%[2] := v% mod 256;
    
    PrintLog("Set atten on rack/pos %d/%d to %f %x %x %x\n", rackNumber%, positionNumber%, atten, cmd%[0], cmd%[1], cmd%[2]);
    
  	return xbStandForm%(xbGetXLN%(rackNumber%, positionNumber%), cmd%, len%);
    
'    PrintLog("Skipping setting attenuation for amplifier debug purposes");
'    return 0;

end


func PM1spkon%(sn%)

	var cmd%[2];
	const len% := 2;

	cmd%[0] := xbcmdPM1SPKON%;
    cmd%[1] := sn%-1;
    
	return xbStandForm%(xlnPM1%, cmd%, len%);

end

func PM1spkoff%(sn%)

	var cmd%[2];
	const len% := 2;

	cmd%[0] := xbcmdPM1SPKOFF%;
    cmd%[1] := sn%-1;
    
	return xbStandForm%(xlnPM1%, cmd%, len%);

end

func PM1config%(config%)

	var cmd%[2];
	const len% := 2;

	cmd%[0] := xbcmdPM1CONFIG%;
    cmd%[1] := config%;
    
	return xbStandForm%(xlnPM1%, cmd%, len%);

end

func PM1clear%(xln%)

	return xbShortForm%(xlnPM1%, xbcmdPM1CLEAR%);

end


func XBGetDeviceCode%(rackNum%, positionNum%)
	var xln%;
	var status%;
	var data%;
    var i%;

	' send xln then the IDENT_REQUEST command
	xln%  := xbGetXLN%(rackNum%,  positionNum%);
	status% := SerialWrite(recTDTCOMPort%, xln%);
	status% := SerialWrite(recTDTCOMPort%, xbcmdIDENTREQUEST%);

	' send 40 SNOPs
	' I guess this is a way of waiting for a reply?
	for i% := 1 to 40 do
		SerialWrite(recTDTCOMPort%, xbcmdSNOP%);
	next;

	data% := 0;
	status% := SerialRead(recTDTCOMPort%, data%);

	docase
    case status% = 0 then
        data% := -1;    ' read time out
	case status% < 0 then 
		data% := -2;	' error condition
	endcase;

	return data%;
end




func Determine1401Type%()
    'This function determines the type of 1401 connected and returns the appropriate value
    'to be given to SampleOptimise().  If there is no 1401 connected, it will default to 
    'Power1401-3.  If type is original Power1401, will default to 400-MHz type.
    var h%;
    var resp$;
    
    h% := SampleStatus();
    if h% >= 0 then  'if sampling is set up or started, do not open connection to 1401.  Calling the function at this point is an error, but should not be fatal
        message("Get1401Type%%() was called while sampling was already setup or occurring!\nBy design this should not happen.  Contact Jeff.\nSpike2 should quit shortly.");
        return 78;  'This will indicate an error - if we somehow subsequently call SampleOptimise (we shouldn't), kill things, this is a serious problem
    endif  
    
    h% := U1401Open();  'opens a connection to the 1401, key here is that the return indicates the type of 1401
    if h% < 0 then 'this is an error code, there is no 1401 detected
        return 77;  'this value will indicate no 1401 at sample optimise step
        'No connection close necessary
    else
        if h% = 3 then  'if unit is power1401, get type of ADC as well
            U1401Write("INFO,S,20;");
            U1401Read(resp$);  'resp will be "4" for 400 kHz and "6" for 625 kHz (value is conincidental, does not represent 100s of kHz)
            if val(resp$) = 6 then
                h% := 3625;  'this value will indicate the 625 kHz Power1401
            endif;
        endif
        U1401Close();  'Close connection to 1401 to allow sampling
        return h%;
    endif

end

var this1401Type%;  'needed for Get1401Type% to be used globally, just declare it here

func Get1401Type%()
    'This function should be called inside a SampleOptimise call to convert the 1401 type
    'as returned by U1401Open to the correct type for the SampleOptimise call.  Too bad these
    'types don't line up, or this function would be unnecessary.
    var h%;
    docase
    case this1401Type% = 0 then
        return 0;  'minimal 1401 (pre-Power1401, we do not have these)
    case this1401Type% = 1 then
        return 3;  '1401plus (we do not have these)
    case this1401Type% = 2 then
        return 6;  'micro1401 mkI 
    case this1401Type% = 3 then
        return 2;  'power1401, 400 MHz  
    case this1401Type% = 3625 then
        return 5;  'power1401, 625 MHz     
    case this1401Type% = 4 then
        return 4;  'micro1401 mkII   
    case this1401Type% = 5 then
        return 7;  'power1401 mkII 
    case this1401Type% = 6 then
        return 8;  'micro1401-3
    case this1401Type% = 7 then
        return 9;  'power1401-3
    case this1401Type% = 77 then
        message("No 1401 detected! Sample optimization set for Power1401-3!");
        return 9;  'power1401-3  
    case this1401Type% = 78 then  'this really shouldn't happen
        message("Bad order of sampling setup/sample optimization calls.  Quitting!");
        halt
    endcase
    
end





'Stolen from Usrey lab - thanks Dan!


'****f* Spike2Util/MiscUtilities/GetParameterProgression%
' NAME
' GetParameterProgression%
' SYNOPSIS
' Prepares an array containing a set of parameters that progress from a starting
' value to an ending value. The progression can be linear or logarithmic, and 
' the order of the parameters can be randomized.
' INPUTS
' n% : Number of values to generate
' result[] : Parameter values are placed here
' indices%[] : Indices into result[] array. Use these to obtain the progression requested
' firstval : first/starting parameter value 
' lastval : last/ending parameter value
' ilog% : Generate linear (log) progression if ilog = 0 (1). 
' irandom% : randomize order of indices%[] when this <> 0
' RETURN VALUE
' Returns 0 on success, nonzero value otherwise (bad value for n%, or else result/indices 
' not large enough)
' NOTES
' For log progressions both firstval and lastval must be > 0. 
'
' The array indices%[] is the order you should follow when accessing the 
' values in result[]. In other words, the order of the parameters is 
' result[indices%[0]], result[indices%[1]], ... 
' In the case of a non-randomized progression you can use this method or you can 
' safely use result[0], result[1], ....
' SEE ALSO
' GetRepeatedParameterProgression
'****

func GetParameterProgression%(n%, result[], indices%[], firstval, lastval, ilog%, irandom%)
    var status% := 0;
    docase
    case Len(result[]) < n% or Len(indices%[]) < n% then
        status% := 1;
    case n% < 2 then
        status% := 1;
    case ilog% <> 0 and (firstval <= 0 or lastval<= 0) then
        status% := 1;
    else
        var stepsize;
        var i%;
        for i% := 0 to n%-1 do
            indices%[i%] := i%;
        next
        if ilog% <> 0 then
            var firstlog, lastlog;
            ' Generate log progression
            firstlog := log(firstval);
            lastlog := log(lastval);
            stepsize := (lastlog - firstlog)/(n%-1);
            for i% := 0 to n%-1 do
                result[i%] := pow(10, firstlog + i% * stepsize);
            next;
        else
            ' Generate linear progression
            stepsize := (lastval - firstval)/(n%-1);
            for i% := 0 to n%-1 do
                result[i%] := firstval + i% * stepsize;
            next;
        endif
        
        if irandom% <> 0 then
            Shuffle%(n%, indices%[]);
        endif
        
    endcase
    return status%;
end

'****f* Spike2Util/MiscUtilities/GetRepeatedParameterProgression%
' NAME
' GetRepeatedParameterProgression%(n%, nr%, result[], indices%[], firstval, lastval, ilog%, irandom%)
' SYNOPSIS
' Prepares an array containing a set of parameters that progress from a starting
' value to an ending value. The progression can be linear or logarithmic, and 
' the order of the parameters can be randomized. In addition, the set may be repeated
' any number of times. 
' n% : Number of values to generate
' nr% : Number of repeats to generate
' result[] : Parameter values are placed here
' indices%[] : Indices into result[] array. Use these to obtain the progression requested
' firstval : first/starting parameter value 
' lastval : last/ending parameter value
' ilog% : Generate linear (log) progression if ilog = 0 (1). 
' irandom% : randomize order of indices%[] when this <> 0
' RETURN VALUE
' Returns 0 on success, nonzero value otherwise (bad value for n%, or else result/indices 
' not large enough)
' NOTES
' For log progressions both firstval and lastval must be > 0. 
'
' The array indices%[] is the order you should follow when accessing the 
' values in result[]. In other words, the order of the parameters is 
' result[indices%[0]], result[indices%[1]], ... 
' In the case of a non-randomized progression you can use this method or you can 
' safely use result[0], result[1], ....
' 
' The indices always complete a set of n% values (0...n%-1) before starting another set. 
' SEE ALSO
' GetParameterProgression
'****


func GetRepeatedParameterProgression%(n%, nr%, result[], indices%[], firstval, lastval, ilog%, irandom%)
    var status% := 0;
    docase
    case Len(result[]) < n%*nr% or Len(indices%[]) < n%*nr% then
        status% := 1;
    case n% < 2 or nr% < 1 then
        status% := 1;
    else
        var ir%;
        var is%;
        for ir% := 0 to nr%-1 do
            is% := GetParameterProgression%(n%, result[ir%*n%:n%], indices%[ir%*n%:n%], firstval, lastval, ilog%, irandom%);
            if is% <> 0 then
                PrintLog("GetRepeatedParameterProgression%()", "Error (" + str$(is%) + ")during repeat# " + str$(ir%));
                status% := is%;
            endif
        next
    endcase
    return status%;
end



'****f* Spike2Util/MiscUtilities/Shuffle%
' NAME
' Shuffle%(n%, list%[])
' SYNOPSIS
' Shuffles a list of INDICES.  Overwrites any values in list%[], up to and including index n%-1.
' INPUTS
' n% : the number of elements in list%[] to turn to shuffled indices
' list%[] : array of values, overwritten with shuffled indices from 0:n%-1 in locations 0:n%-1
' RETURN VALUE
' Returns 0 on success, 1 otherwise (n% < 1 or length of list%[] less than n%). 
'****

func Shuffle%(n%, list%[])
    var status% := 0;
    var i%, si%, tmp%;
    if n% < 1 or Len(list%[]) < n% then
        status% := 1;
    else
        ' populate the list%[] array with indices. 
        for i% := 0 to n%-1 do
            list%[i%] := i%; 
        next;
        
        ' Step thru the indices from 0 to n%-2. At each index, we consider the array starting at the 
        ' current index and ending at the end of the array. If there are M elements in that array, 
        ' draw a random number between 0 and M-1. Swap the index at that position with the index at 
        ' position 0. Step to the next index and repeat. 
        for i% := 0 to n%-2 do
            si% := Rand(n%-i%, i%);
            tmp% := list%[i%];
            list%[i%] := list%[si%];
            list%[si%] := tmp%;
        next;
    endif
    return status%;
end




'
'
'===== SelectDirectory$ =====

'Spike2 does not have a built in function that allows you to select a folder from a GUI.
'This function finds a way around that, and returns the full path of the folder selected
'from the GUI.  It is possible to create a new folder.
func SelectDirectory$()
    
    var currentPath$;
    var tempPath$;
    var result%;

    currentPath$ := FilePath$(0);  'Get current directory
    'result% := FilePathSet("",0,"Select a directory",1);  'Cannot use "make" capability in Spike6, changed by Spike8
    result% := FilePathSet("",0,"Select a directory");  'Allow user to select a directory
    if result% < 0 then 
        message("There has been an error, please see log window");
        printlog("There has been an error attempting to select a directory, error is %s\n",Error$(result%));
        tempPath$ := "";
    else
        tempPath$ := FilePath$(0);  'Get the path that was just selected in the dialog
    endif;
    
    FilePathSet(currentPath$);  'Set the file path for new Spike2 data files back to what it was, regardless of success
    
    return tempPath$;

end


'===== End SelectDirectory$ =====
'
'