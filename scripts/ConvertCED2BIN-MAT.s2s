'This script is an attempt to combine the export of CED continuous electrode data as binary data that 
'will be readable by Kilosort (ConvertCED2BIN.s2s) AND the export of the necessary trial information
'(ConvertCED2MAT.s2s).  Should hopefully be pretty seamless.

var ConvertSaveDir$ := "None Selected";
var ConvertSaveFileName$ := "";
var SaveNameBin$;
var SaveNameMat$;
var Text1%;
var datawindow%;
var chanToExportBin%[100];
var chanToExportMat%[100];
var nChanFound%;
var i%;
var n%;
var tempN%;
var currChan%;
var t;
var bh%;

#include "recfuncs.s2s"


'Run dialog to select save location for .mat file
SaveLocationDialog();

'Select and open desired .smr file
datawindow% := FileOpen("*.smr*",0,9);

'Determine save name, based on current .smr file, if not specified
if ConvertSaveFileName$ = "" then  'use filename from just-opened file
    SaveNameBin$ := ConvertSaveDir$ + FileName$(3) + ".bin";
    SaveNameMat$ := ConvertSaveDir$ + FileName$(3) + ".mat";
    printlog("save names are %s, %s\n",SaveNameBin$,SaveNameMat$);
else  'use filename from dialog
    SaveNameBin$ := ConvertSaveDir$ + ConvertSaveFileName$  + ".bin";
    SaveNameMat$ := ConvertSaveDir$ + ConvertSaveFileName$  + ".mat";
    printlog("save names are %s, %s\n",SaveNameBin$,SaveNameMat$);
endif;




'Find channels to export, will fill nChanFound% and chanToExport%[]
for i% := 3 to 23 do
    AddChanIfPresentBin(i%);
next

'Create variable to hold data, and fill it
var dumpSize% := 100000;  'We cannot dump the whole variable at once, but we can dump many points at a time - 10^5 is faster than either 10^4 or 10^6
var dataOut%[nChanFound%][dumpSize%];
t := 0;  'Start time at 0

'Open binary file to write data to
bh% := FileOpen(SaveNameBin$,9,1);
if bh% <= 0 then
    message("File " + SaveNameBin$ + " failed to open for binary writing!  Quitting!");
    halt;
endif 

'Keep dumping to binary file until SMR file is completely dumped
repeat
    'Loop through present channels and fill dataOut%[][]
    for i% := 0 to nChanFound%-1 do
        currChan% := chanToExportBin%[i%];
        tempN% := view(dataWindow%).ChanData(currChan%,dataOut%[i%][],t,view(dataWindow%).Maxtime(currChan%));  'fill dataOut%[][] and get number of elements 
        if i% = 0 then
            n% := tempN%;
        else
            n% := min(n%,tempN%);
        endif
    next
    'Write to file
    if n% > 0 then
        view(bh%).BWriteSize(2,dataOut%[][:n%]);  'Write up to n% values on each channel present, use 2 (2 bytes) for int16
        t := t + n%*view(dataWindow%).BinSize(currChan%);  'Update the time
    endif;
until n% <= 0;

'Kilosort can open these files, but dies on pre-processing with an obscure error

'Close binary file 
FileClose(bh%);





'While file (dataWindow%) is open, go through again and do the .mat version

'Save correct channels
'We are going to go through possible channels that we might have, and determine if they exist on any given file,
'if they exist, we will add them to the list of channels to be exported
'At first glance, it doesn't appear that one can loop through a vector, so...
'Go through this based on known channels from CreateSampleConfiguration
AddChanIfPresentMat(33);  'Lever channel       ("Lever")
AddChanIfPresentMat(34);  'JoystickX channel   ("JoystikX")
AddChanIfPresentMat(35);  'JoystickY channel   ("JoystikY")
AddChanIfPresentMat(37);  'BAK1 channel        ("BAK1")
AddChanIfPresentMat(38);  'BAK2 channel        ("BAK2")
ChanTitle$(30,"TextMark");  'Sometimes, it's "untitled", change to "TextMark"
AddChanIfPresentMat(30);  'Textmark channel (may list as "untitled")
AddChanIfPresentMat(31);  'Keyboard channel    ("Keyboard")
AddChanIfPresentMat(36);  'Audio copy channel  ("Audio")
AddChanIfPresentMat(28);  'EyeX channel        ("EyeX")  'currently EyeX/Y channels do not exist, but they may be implemented in the future
AddChanIfPresentMat(29);  'EyeY channel        ("EyeY")
AddChanIfPresentMat(32);  'Digital marker      ("ToneStar" - is requested to be "ToneStartStop" but of course it's limited to 8 chars)

chanToExportMat%[0] := nChanFound%;

ExportChanList();  'clear ExportChanList options, necessary step!
ExportChanList(0,view(datawindow%).maxtime(),chanToExportMat%[]);  'set channel list for export of all channels at times 0 to maxtime()
FileSaveAs(SaveNameMat$,100,0,"",0,"UseSName=0|UseCName=1|WaveData=1");  'flag of 1 in position three forces overwrite without asking user, WaveData=1 forces data into "single" to save space




'We're done!


'==============Subfunctions===============

'
'
'===== AddChanIfPresentBin =====
proc AddChanIfPresentBin(chan%)
if ChanTitle$(chan%) <> "" then  
    if ChanKind(chan%) <> 1 and ChanKind(chan%) <> 9 then  'If the channel is not a Waveform or RealWave channel, something is wrong
        message("Channel " + Str$(chan%) + " is expected to be a waveform/realwave channel but is not!  Quitting!");
        halt;
    endif
    chanToExportBin%[nChanFound%] := chan%;
    nChanFound% += 1;
endif; 
end
'===== End AddChanIfPresentBin =====
'
'



'
'
'===== AddChanIfPresentMat =====
proc AddChanIfPresentMat(chan%)
    if ChanTitle$(chan%) <> "" then
        nChanFound% += 1;
        chanToExportMat%[nChanFound%] := chan%;
    endif; 
end
'===== End AddChanIfPresentMat =====
'
'




'
'
'===== SaveLocationDialog =====

'A simple dialog box which allows us to select the location/filename of the file to write
proc SaveLocationDialog()
    var i%;
    var key$;
    
    
    key$:="Reclab\\ConvertCED2BIN";
    
    ConvertSaveDir$ := GetStringRegistryValue$(key$, "SaveDir", ConvertSaveDir$);
    
    DlgCreate("Select Save Location");
    
    Text1% := DlgText( "Last Save Directory: " + ConvertSaveDir$,2,1,100);
    DlgButton(2, "Select New Save Directory",SelectSaveDir%,2,2);
    
    DlgString(1,"File save name (if different than filename)",25,"",0,4);
    
    DlgButton(1, "Select Data File", 0);
    
    i% := DlgShow(ConvertSaveFileName$);
    
    if i% = 1 then  'if user hit "Select Data File"
        printlog("Save directory is %s and file name is %s\n",ConvertSaveDir$,ConvertSaveFileName$);
    
        SetStringRegistryValue(key$, "SaveDir", ConvertSaveDir$);
    else
        halt;
    endif;
    
    
end


'===== End SaveLocationDialog =====
'
'



'
'
'===== SelectSaveDir =====

func SelectSaveDir%()

    ConvertSaveDir$ := SelectDirectory$();  'This will have the ending slash
    DlgValue$(Text1%,ConvertSaveDir$);  'update value in calling dialog
    
	return 1;  'return 1 so calling dialog doesn't close
    
end;

'===== End SelectSaveDir =====
'
'