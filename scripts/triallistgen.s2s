' $Log$
' Revision 1.7  2012/11/26 19:38:21  jeff
' *** empty log message ***
'
' Revision 1.6  2012/08/16 20:39:36  jeff
' *** empty log message ***
'
' Revision 1.5  2012/03/16 18:34:53  jeff
' Commit
'
' Revision 1.4  2008/06/06 23:20:36  devel
' Add comments indicating what funcs to NOT call from elsewhere.
'
' Revision 1.3  2008-04-29 17:40:41  devel
' Clarify documentation. NO repeated indices in returned trial lists.
'
' Revision 1.2  2008-03-11 19:28:09  devel
' Minor bug fixes.
'
' Revision 1.1  2008-03-07 20:17:53  devel
' Initial add.
'
'
'****h* Spike2Util/TrialListGen
' FUNCTION
'
' Utility to generate lists of trials that follow a block format. A block of trials is 
' defined here as a set of trial indices (numbered from 0...nTypes%) which are ordered so 
' that all trial types occur a certain number of times (the block size) before any of the 
' trial types has another occurrence. Thus, you can expect that trial types will complete
' an entire block before more trial types are presented. This means that your trial types
' will be randomized, but you can control the balance in their occurrence. If you choose a
' block size of 4 and you require 10 blocks, you will get 40 trials of each type. But at any
' point you are guaranteed that the number of occurrences of each trial type is within 4
' of all other types. 
' 
' To use you must first 
' call tlgInit with the following information:
'
' nTypes%       number of trial types. The trial list generator will only provide a list
'               of indices, where each index is in [0, nTypes%-1]. The user must interpret
'               the index appropriately -- the indices represent different trial types, but 
'               the trial list generator doesn't know anything about them. 
'
' nTrialsPerBlock%      number of trials in a complete block. This many trials of each type 
'                       must be completed before a new block is started.
'                       Note: this might be better as nRepeatsPerBlock%, because it's less ambiguous.
'
' nBlocksRequired%      number of blocks that should be completed
'
' minListSize%      minimum size of trial list returned by each call to tlgGetTrialList%
'
' maxListSize%      maximum size of trial list returned by each call to tlgGetTrialList%
'
' This utility is designed to generate sets of trials -- called trial lists -- which will 
' satisfy the requirements outlined in the parameters described above. The caller must provide
' an array with at least maxListSize% elements when calling tlgGetTrialList%(). 
'
' Usage:
'
' 1. include in another script: #include "TrialListGen.s2s"
' 2. initialize first - before calling any other routines here: tlgInit()
' 3. call tlgGetTrialList() to get a list. This function returns the number in the list
'    returned (which is at least minListSize% and no greater than maxListSize%). 
'    When it returns 0, it means all blocks/trials are completed.
' 4. As trials are completed, call tlgTrialCompleted(trialIndex%), where trialIndex% is the 
'    index of the completed trial (duh). This function increments counters, checks for 
'    completed blocks and initializes new blocks as needed. You are not required to call 
'    tlgTrialCompleted(trialIndex%) for each trial. For example, if you want complete blocks
'    of trials where the subject gives a correct response you can call tlgTrialCompleted%()
'    for just those trials. 
'
' Remember - tlgGetTrialList() will return 0 when all blocks are complete. You MUST call 
' tlgTrialCompleted for SOME trials, however, otherwise tlgTrialList will return 
' trial lists FOREVER. 
'****
'

const tlgMaxPossibleChoices% := 5000;    ' This should be more than NTrialTypes% * NTrialsPerBlock can ever be! 
var tlgPossibleChoices%[tlgMaxPossibleChoices%];    ' used in tlgGetNextTrial%() only
const tlgMaxTrialTypes% := 100;         ' This has to be at least as large as that used in main
var tlgNTrialTypes%:= 0;                ' must be supplied in TLGInit(N)
var tlgTrialsCompletedThisBlock%[tlgMaxTrialTypes%];
var tlgTrialsCompleted%[tlgMaxTrialTypes%];
var tlgNTrialsPerBlock% := 0;
var tlgNBlocksCompleted% := 0;
var tlgNBlocksRequired% := 0;
var tlgMinListSize% := 0;
var tlgMaxListSize% := 0;
var tlgInitialized% := 0;




''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' tlgInit(nTypes%, nTrialsPerBlock%, nBlocksRequired%, minListSize%, maxListSize%)
'
' this should be called once, before calling any other tlg* functions or procs. 
' nTypes% is the number of trial types. 
' nTrialsPerBlock% is the number of trials for each type needed to complete a "block". 
' nBlocksRequired% is the number of "blocks" before we don't serve any more trial lists. 
' minListSize%, maxListSize% is the range of list sizes which will be returned by 
' tlgGetTrialList%(). 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc tlgInit(nTypes%, nTrialsPerBlock%, nBlocksRequired%, minListSize%, maxListSize%)
    tlgNTrialTypes% := nTypes%;
    tlgNTrialsPerBlock% := nTrialsPerBlock%;
    tlgNBlocksRequired% := nBlocksRequired%;
    tlgMinListSize% := minListSize%;
    tlgMaxListSize% := maxListSize%;
    tlgInitialized% := 1;
    tlgInitBlock();
end




'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' tlgInitBlock()
'
' Called internally (don't call this from anywhere outside this file!) to initialize the 
' counters for a block. 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc tlgInitBlock()
    var index%;
    for index% := 0 to tlgNTrialTypes%-1 do
        tlgTrialsCompletedThisBlock%[index%] := 0;
    next
end    




'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' tlgTrialIndexHowManyCompleted%(trialIndex%)
' Note that this function is not terribly useful, as one could simply
' get tlgTrialsCompleted%[trialIndex%] directly in the first place.
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func tlgTrialIndexHowManyCompleted%(trialIndex%)
    if tlgInitialized% = 0 then Message("WARNING: Trial list generator is NOT initialized! Call tlgInit()."); endif
    return tlgTrialsCompleted%[trialIndex%];
end




''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' tlgTrialIndexCompleted(trialIndex%)
' 
' Call this function after a trial of trial index 'trialIndex%' has been 
' successfully completed. 
' This function should be called whenever a trial is completed, or when you wish
' a trial to be marked as complete for the purposes of the block/list generator. 
' You may set any criteria to define a "complete" trial in this sense - the trial 
' list generator does not care. 
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
proc tlgTrialIndexCompleted(trialIndex%)
    var index%;
    var incomplete% := 0;
    
    if tlgInitialized% = 0 then 
        Message("WARNING: Trial list generator is NOT initialized! Call tlgInit()."); 
    endif
    tlgTrialsCompleted%[trialIndex%] += 1;
    tlgTrialsCompletedThisBlock%[trialIndex%] += 1;
    
    ' Is the current block complete? 
    while incomplete% = 0 and index% < tlgNTrialTypes% do
        if tlgTrialsCompletedThisBlock%[index%] < tlgNTrialsPerBlock% then
            incomplete% := 1;
        endif
        index% += 1;
    wend
    
    ' If current block is complete, then increment block counter and re-init block
    if incomplete% = 0 then
        tlgNBlocksCompleted% += 1;
        tlgInitBlock();
    endif
end




'****f* Spike2Util/TrialListGen/tlgGetCurrentBlock%
' NAME
' tlgGetCurrentBlock%(&block%)
' SYNOPSIS
' Gets current block number
' INPUTS
' block% : current block number (number of blocks completed; starts at 0)
' RETURN VALUE
' Returns 0.
' NOTES
'****

func tlgGetCurrentBlock%(&block%)
    block% := tlgNBlocksCompleted%;
    return 0;
end




'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' tlgGetTrialList%(trialList%[])
' SYNOPSIS
' Gets a list of trial indices. 
' INPUTS
' trialList%[] : list of trial indices
' RETURN VALUE
' Returns 0 if all blocks are complete, otherwise returns the number of trial indices
' in trialList%[].
' NOTES
' The return value may be any number between the min and max number of trials you 
' specified when you called tlgInit. If there are trials left, but there are fewer
' than the minimum value, then that number will be returned.
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func tlgGetTrialList%(trialList%[])
    var n%;
    var i%;
    var last% := -1;
    
    ' check that tlg was initialized
    if tlgInitialized% = 0 then 
        Message("WARNING: Trial list generator is NOT initialized! Call tlgInit()."); 
    endif
    
    ' Are we all done? 
    if tlgNBlocksCompleted% = tlgNBlocksRequired% then
        return 0;
    endif
    
    ' Since the current block is not done, we will generate a trial list. First, decide
    ' how many trials will be in the list
    
    n% := Rand(tlgMaxListSize%-tlgMinListSize%, tlgMinListSize%);
    for i% := 0 to n%-1 do
        trialList%[i%] := tlgGetNextTrial%(last%);
        last% := trialList%[i%];
        next
    return n%;
end




'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' tlgGetNextTrial%(last%)
'
' This func is called internally by tlgGetTrialList. Do not call it from anywhere outside
' this file!
' 
' Generates a trial index. The index generated will NOT be the same as last%.
' It is ASSUMED that all blocks are NOT completed yet! 
' Given that, this func uses one of two methods:
'
' If there are any choices available for trial indices OTHER THAN last, we 
' make a choice from one of them. If NOT, i.e. last% is also the ONLY CHOICE LEFT
' in the current block, then we choose from a list of the other indices. In the
' latter case you'll end up with indices returned which have already had all 
' the trials required for the block. No matter - its a messy algorithm and this is 
' one possible messy solution. 
'
' Remember that when choices are made here we do NOT increment the counters in
' tlgTrialsCompletedThisBlock%[]. That is done in tlgTrialCompleted. 
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func tlgGetNextTrial%(last%)
    var count% := 0;
    var i%, j%;
    var choice%;
    
    ' Generate choice list. 
    for i% := 0 to tlgNTrialTypes%-1 do
        if i% <> last% then
            for j% := tlgTrialsCompletedThisBlock%[i%]+1 to tlgNTrialsPerBlock% do
                tlgPossibleChoices%[count%] := i%;
                count% += 1;
                next
        endif
        next
    
    ' Are there any choices? If not, then generate a dummy list from all possibilities except
    ' for last% 
    
    if count% = 0 then
        for i% := 0 to tlgNTrialTypes%-1 do
            if i% <> last% then
                tlgPossibleChoices%[count%] := i%;
                count% += 1;
            endif
            next
    endif
    
    ' Now choose one from the list. It doesn't matter here which method was used to generate
    ' the list. 
    
    choice% := Rand(count%, 0);
    return tlgPossibleChoices%[choice%];
end





'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' DealNumberOfS1s(nS1%,nS2%,nMinS1%,nMaxS1%,&numS1perTrial%[])
'
' This function is used in the case where the total number of S1s and S2s is predicated
' from the start of the experiment (e.g., combined FRA/Rate-level/Space)
' 
' Such a scenario does not allow for random selection of the number of S1s on each trial.
' Here we return a list in numS1perTrial%[] of the number of S1s for each S2. The total
' number of S1s will add to nS1%, and no S2 will be assigned fewer than nMinS1% S1s or
' more than nMaxS1% S1s.
'
' For example, nS1% = 20; nS2% = 6; nMinS1% = 2; nMaxS1% = 6 could return a list of:
' [2 3 4 3 2 6] in numS1perTrial%[] (with any extra indices blank), this corresponds to a structure of:
' S1, S1, S2
' S1, S1, S1, S2
' S1, S1, S1, S1, S2
' S1, S1, S1, S2
' S1, S1, S2
' S1, S1, S1, S1, S1, S1, S2
'
' The exact identity of S1/S2 stimuli is determined elsewhere, this just returns the trial order
' for this constrained case
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func DealNumberOfS1s%(nS1%,nS2%,nMinS1%,nMaxS1%,&numS1perTrial%[])
    var i%;
    var ok%;
    var temp%;
    
    'Check for math impossibility
    if nMaxS1%*nS2% < nS1% then  'if there are more S1 stimuli than allowed by "max"
        message("Too many S1 stimuli ("+Str$(nS1%)+") to have a maximum of "+Str$(nMaxS1%)+" S1s per S2 ("+Str$(nS2%)+" S2s)");
        return 0;  'return failure
    endif;
    
    if nMinS1%*nS2% > nS1% then  'if there are not enough S1 stimuli to reach "min"
        message("Not enough S1 stimuli ("+Str$(nS1%)+") to have a minimum of "+Str$(nMinS1%)+" S1s per S2 ("+Str$(nS2%)+" S2s)");
        return 0;  'return failure
    endif;
    
    'Blank out numS1perTrial%[] in case it was already filled
    ArrConst(numS1perTrial%[],0);
    
    'Deal out minimum S1 trials
    ArrAdd(numS1perTrial%[0:nS2%],nMinS1%);
    
    'Update number of S1s left to assign
    nS1% := nS1%-(nMinS1%*nS2%);
    
    'Loop through the remaining S1s
    for i% := 1 to nS1% do
        ok% := 0;
        while ok% = 0 do 'find incrementable index
            temp% := Floor(Rand(nS2%,0));
            if numS1perTrial%[temp%] < nMaxS1% then 'if there are fewer than the maximum, incrementing is OK
                ok% := 1;
            endif;
        wend
        'Now that we've found an incrementable index, increment it
        numS1perTrial%[temp%]+=1;
    next;
    
    return 1;  'return success
end




'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' SendTrialToMiddle%(nTrials%,unfinishedTrial%,minToSkip%,&trialOrder%[])
'
' This function is used after an interrupt or otherwise rejected/unfinished trial.  
' The default behavior will be to send the unfinished trial to a random middle 
' position in the remainder of the trials.  For instance, if the 34th of 200 
' defined trials is unfinished, it will be placed in a random position between
' #34 and #199.  If it were to be placed at trial #42, then trials #35-42 would
' be bumped forward one position to #34-41, the old #34 is placed at #42, and 
' #43-199 are unchanged.  The trial counter is not advanced, so old trial #35
' (now trial #34) will be the next stimulus.
'
' nTrials% is the total number of trials
' unfinishedTrial% is the trial to reorder
' minToSkip% is the minimum number of trials to elapse before reinsertion
' trialOrder%[] is the current trial order, which will be updated
'
' If minToSkip% is set, the unfinished trial will not be inserted until at least
' that many trials have elapsed, if possible.  If there are not enough trials remaining
' to obey minToSkip%, the unfinished trial will be placed at the end.
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func SendTrialToMiddle%(nTrials%,unfinishedTrial%,minToSkip%,&trialOrder%[])
    
    var status% := -1;  '-1 is failure status
    var minpos%;
    var maxpos%;
    var newpos%;
    var tempTrialOrder%;
    
    if unfinishedTrial% < nTrials%-1 then  'unfinishedTrial% is an index, but nTrials% is a count
        minpos% := unfinishedTrial% + minToSkip%;  'in index units
        maxpos% := nTrials%-1;  'now also in index units
        'determine new position in which to put unfinishedTrial%
        if minpos% < maxpos% then
            newpos% := floor(rand(maxpos%-minpos%+1,minpos%));  'this works, in index units
            status% := 1;  'status indicates full success
        else
            newpos% := maxpos%;  'if minimum position is beyond the end of trials, just put at the end
            status% := 0;  'status indicates success in returning a legal value, but failure to randomize due to being at end of trials
        endif;
        'now insert trial, shifting as required
        docase
        case newpos% = unfinishedTrial% then
            'do nothing, trial will repeat
        case newpos% = maxpos% then
            tempTrialOrder% := trialOrder%[unfinishedTrial%];
            'arrconst(trialOrder%[unfinishedTrial%:maxpos%-unfinishedTrial%+1],trialOrder%[unfinishedTrial%+1:maxpos%-unfinishedTrial%]); 'Nope! (But silent error)
            arrconst(trialOrder%[unfinishedTrial%:maxpos%-unfinishedTrial%],trialOrder%[unfinishedTrial%+1:maxpos%-unfinishedTrial%]);  'Yep!
            'trialOrder%[newpos%] := unfinishedTrial%;  'Nope!
            trialOrder%[newpos%] := tempTrialOrder%;  'Yep!
        else
            tempTrialOrder% := trialOrder%[unfinishedTrial%];
            'arrconst(trialOrder%[unfinishedTrial%:newpos%-unfinishedTrial%+1],trialOrder%[unfinishedTrial%+1:newpos%-unfinishedTrial%+1]);  'Nope! (But silent error)
            arrconst(trialOrder%[unfinishedTrial%:newpos%-unfinishedTrial%],trialOrder%[unfinishedTrial%+1:newpos%-unfinishedTrial%]);  'Yep!
            'trialOrder%[newpos%] := unfinishedTrial%;  'Nope!
            trialOrder%[newpos%] := tempTrialOrder%;  'Yep!
        endcase        
    else
        'Don't do anything here - if it is the last trial it will automatically repeat, that's the only option
        status% := 0;  'status indicates success in returning a legal value, but failure to randomize due to being at end of trials
    endif;
      
    return status%;
end



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' ShuffleList%(list%[])
'
' Shuffles a list (vector of integers).  Conceptually, this
' steps through each position in the vector (from left to right),
' swapping the current position with a randomly chosen element
' from that element rightward (inclusive, so "no swap" is a
' possibility).  If you think about it, it works.
'
' In other words, it puts a randomly-chosen element into
' position 0.  Then it puts a randomly-chosen element from the
' set of elements not at position 0 into position 1.  Then it
' puts a randomly-chosen element from the set of elements not
' at positions 0-1 into position 2, etc.
'
' Note that the result is placed into the variable used as an
' argument.  If a portion of a variable is fed in (e.g. list%[0:5])
' this will work as expected, only elements 0 - 4 will be shuffled.
'
' Rock on.
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func ShuffleList%(&list%[])
    var status% := 0;
    var i%, si%, tmp%;

    ' Step thru the indices from 0 to n%-2. At each index, we consider the array starting at the 
    ' current index and ending at the end of the array. If there are M elements in that array, 
    ' draw a random number between 0 and M-1. Swap the index at that position with the index at 
    ' position 0. Step to the next index and repeat. 
    for i% := 0 to Len(list%[])-2 do
        si% := Rand(Len(list%[])-i%, i%);
        tmp% := list%[i%];
        list%[i%] := list%[si%];
        list%[si%] := tmp%;
    next;
    return status%;  'this does nothing right now, because it can't really break.
end


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' ShuffleList(list[])
'
' Shuffles a list (vector of floats).  Conceptually, this
' steps through each position in the vector (from left to right),
' swapping the current position with a randomly chosen element
' from that element rightward (inclusive, so "no swap" is a
' possibility).  If you think about it, it works.
'
' In other words, it puts a randomly-chosen element into
' position 0.  Then it puts a randomly-chosen element from the
' set of elements not at position 0 into position 1.  Then it
' puts a randomly-chosen element from the set of elements not
' at positions 0-1 into position 2, etc.
'
' Note that the result is placed into the variable used as an
' argument.  If a portion of a variable is fed in (e.g. list[0:5])
' this will work as expected, only elements 0 - 4 will be shuffled.
'
' Rock on.
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''
func ShuffleList(&list[])
    var status% := 0;
    var i%, si%, tmp;

    ' Step thru the indices from 0 to n%-2. At each index, we consider the array starting at the 
    ' current index and ending at the end of the array. If there are M elements in that array, 
    ' draw a random number between 0 and M-1. Swap the index at that position with the index at 
    ' position 0. Step to the next index and repeat. 
    for i% := 0 to Len(list[])-2 do
        si% := Rand(Len(list[])-i%, i%);
        tmp := list[i%];
        list[i%] := list[si%];
        list[si%] := tmp;
    next;
    return status%;  'this does nothing right now, because it can't really break.
end