' $Id$

' Notes:
' Calling DataParametersDialog%() once will generate registry keys Reclab/Data. 
' The first time there is no data set name - hit the "New Data Set" key to generate it. 
' The new name is NOT shown in the dialog - trust that it is there. 
' Hitting Save will store the values inside the new key. 



' File system reference vars. Each var is a directory path, WITHOUT the trailing slash. 
var bin$, script$;
script$ := View(App(3)).FileName$(1) + View(App(3)).FileName$(2);	' folder containing this script
bin$ := View(App(3)).FileName$(1) + View(App(3)).FileName$(2) + "..\\bin";	' Location of executables is ..\bin, relative to script dir


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Get Current configuration START
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func GetCurrentConfiguration$()
	var key$;
	var s$;
	key$:="Reclab";
	Profile(key$, "CurrentConfiguration", "default", s$);
	return s$;
end;

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Configuration Selection START
'
'	These functions and vars handle the current configuration and the list of possible
'	configurations. SelectConfigurationDialog% prompts user to select current configuration.
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



var CurrentConfiguration$;
var ConfigurationList$;

proc GetConfigurationParameters()
	var rkey$;
	rkey$:="Reclab";
	Profile(rkey$, "ConfigurationList", "", ConfigurationList$);
	Profile(rkey$, "CurrentConfiguration", "default", CurrentConfiguration$);
end;

proc SaveConfigurationParameters()
	var rkey$;
	rkey$:="Reclab";
	Profile(rkey$, "ConfigurationList", ConfigurationList$);
	Profile(rkey$, "CurrentConfiguration", CurrentConfiguration$);
end;
	
func SelectConfigurationDialog%()
	var s$;
	var i%;
	var iReturn% := 0;
	GetConfigurationParameters();
	s$ := CurrentConfiguration$;

	DlgCreate("Select configuration", 25, 10);
	DlgString(1, "Configuration:", 20, "", 0, 0, ConfigurationList$);
	i% := DlgShow(s$);


	if i% = 1 then

		i% := CheckDup(s$, ConfigurationList$);
		if i% = 0 then
			' New config, add to Config list, set it to current
			if Len(ConfigurationList$)>0 then
				ConfigurationList$ := ConfigurationList$ + "|" + s$;
				CurrentConfiguration$ := s$;
			else
				ConfigurationList$ := s$;
				CurrentConfiguration$ := s$;
			endif;
		else
			CurrentConfiguration$ := s$;
		endif
		SaveConfigurationParameters();
		iReturn% := 1;

	else
		iReturn% := 0;
	endif

	return iReturn%;
end;

func CheckDup(value$, list$)
	var items$[20];
	var nitems%:=0;
	var i%;

	' Extract list into an array
	ReadSetup("", "", "", "", "|");
	nitems% := ReadStr(list$, items$);

	var s1tmp$, s2tmp$;
	s1tmp$ := UCase$(value$);
	for i% := 0 to nitems%-1 do
		s2tmp$ := UCase$(items$[i%]);
		if s1tmp$ = s2tmp$ then
			return 1;
		endif
	next

	return 0;
end;


''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Configuration Selection END
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Data parameters START
'
'	Vars that control where data is stored. 
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

var dataPathRoot$;		' base path for data storage
var dataDataSet$;		' folder under data path where data files placed
var dataCellName$;		' part of base name for all data files
var dataDataSetTextItem%;	' 

proc GetDataParameters()
	var stmp$;
	var key$;

    key$:="Reclab\\Data";

	Profile(key$, "PathRoot", "C:\\data", dataPathRoot$);
	Profile(key$, "DataSet", "", dataDataSet$);
	Profile(key$, "CellName", "", dataCellName$);
	return;
end;

proc SaveDataParameters()
	var stmp$;
	var key$;

	key$:="Reclab\\Data";

	Profile(key$, "PathRoot", dataPathRoot$);
	Profile(key$, "DataSet", dataDataSet$);
	Profile(key$, "CellName", dataCellName$);
	return;
end;

func DataParametersDialog%()
	var i%;
	GetDataParameters();
	DlgCreate("Data Storage Parameters", 25, 10, 50);
	DlgText("Data root path: " + dataPathRoot$, 0, 1);
	dataDataSetTextItem% := DlgText("Data set name: " + dataDataSet$, 0, 2);
	DlgString(1, "Cell name:", 10, "", 0, 3);
        DlgButton(2, "New Data Set", NewDataSet%);
	i% := DlgShow(dataCellName$);
	if (i% = 1) then
		if Len(dataDataSet$) = 0 then
			Message("Must specify a data set (try the button!)");
		else
			if Len(dataCellName$) = 0 then
				Message("Must specify a cell name");
			else
				FilePathSet(dataPathRoot$ + "\\" + dataDataSet$, 3, 1);
				SaveDataParameters();
			endif;
		endif;
	endif;
	return i%;
end;


func NewDataSet%()
	var d$;
	var i%;
	var dirs$[100];	' if there are ever more than 100 datasets in a single day there will be trouble
	d$ := Date$(2, 2, 3, 3, "-");
	PrintLog("NewDataSet: date string = " + d$ + "\n");

	' Change current dir to data path root, then get list of subdirs with this date string
	PrintLog("NewDataSet: dataPathRoot$=" + dataPathRoot$ + "\n");
	FilePathSet(dataPathRoot$, 0, 1);
	i% := FileList(dirs$, -2, d$ + "-??");
        PrintLog("NewDataSet: found " + str$(i%) + " dirs\n");

	' form new dataset name. The first will have "-01" appended, the second "-02", etc. 
	dataDataSet$ := Print$("%s-%02d", d$, i%+1);
	PrintLog("NewDataSet: dataset= " + dataDataSet$ + "\n");
	DlgValue$(dataDataSetTextItem%, "Data set name: " + dataDataSet$);
	return 1;
end;



'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' Data parameters END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' Freqout parameters START
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

var WindowRadius;
var FixationTime;
var AcquisitionTime;
var ResponseTime;
var FixationX;
var FixationY;

proc GetFreqoutParameters()
	var stmp$;
	var key$;
	key$ := "Reclab\\" + GetCurrentConfiguration$() + "\\Freqout";
	Profile(key$, "WindowRadius", "2.0", stmp$);
    WindowRadius := val(stmp$);
	Profile(key$, "FixationX", "0.0", stmp$);
    FixationX := val(stmp$);
	Profile(key$, "FixationY", "0.0", stmp$);
    FixationY := val(stmp$);
    Profile(key$, "AcquisitionTime", "1.0", stmp$);
    AcquisitionTime := val(stmp$);
    Profile(key$, "FixationTime", "1.0", stmp$);
    FixationTime := val(stmp$);
    Profile(key$, "ResponseTime", "1.0", stmp$);
    ResponseTime := val(stmp$);
end;

proc SaveFreqoutParameters()
	var key$;
	key$ := "Reclab\\" + GetCurrentConfiguration$() + "\\Freqout";
	Profile(key$, "WindowRadius", str$(WindowRadius));
	Profile(key$, "FixationX", str$(FixationX));
	Profile(key$, "FixationY", str$(FixationY));
    Profile(key$, "AcquisitionTime", str$(AcquisitionTime));
    Profile(key$, "FixationTime", str$(FixationTime));
    Profile(key$, "ResponseTime", str$(ResponseTime));
end;


func FreqoutParametersDialog%()

	var i%;
	GetFreqoutParameters();
	DlgCreate("Freqout parameters: " + GetCurrentConfiguration$(), 25, 10);
	DlgReal(1, "Fixation X:", -40, 40);
	DlgReal(2, "Fixation Y:", -40, 40);
	DlgReal(3, "Window radius:", .1, 10);
	DlgReal(4, "Acquisition time(s):", .1, 30);
	DlgReal(5, "Fixation time(s):", .1, 30);
	DlgReal(6, "Response time(s):", .1, 30);
    
	i% := DlgShow(FixationX, FixationY, WindowRadius, AcquisitionTime, FixationTime, ResponseTime);	

	' If user cancelled, reload params
	if i% = 0 then
		GetFreqoutParameters();
	else
		SaveFreqoutParameters();
	endif

	return 1;
end;


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' Freqout parameters END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Functions specific to this script ONLY - START
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

func RigConfigDialog%(config$)

	DlgCreate("Rig Configuration: " + config$, 25, 10, 40);
	DlgGroup("Settings", 0, 1, 16, 2);
	DlgButton(1, "Data", DataParametersDialog%, 2, 2);

	DlgGroup("Scripts", 18, 1, 16, 2);
	DlgButton(2, "Freqout", FreqoutParametersDialog%, 20, 2);

	DlgShow();

end;

'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	Functions specific to this script ONLY - END
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''




''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
' Start here. 
'
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

var iState%:=0;
const stateStart% := 0;
const stateQuit% := 9;
const stateNew% := 1;
const stateRigConfigDialog% := 4;

' Initialize state
iState% := stateStart%;

' Infinite loop......
repeat
	
	docase 
		case iState% = stateStart% then

			if SelectConfigurationDialog%() = 1 then
				iState% := stateRigConfigDialog%;
			else
				iState% := stateQuit%;
			endif;

		case iState% = stateRigConfigDialog% then

			RigConfigDialog%(GetCurrentConfiguration$());

			iState% := stateQuit%;

	endcase;


until iState% = stateQuit%;



''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
'
'	END of script body...
'
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

