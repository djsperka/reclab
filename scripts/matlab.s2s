
var matlabIsOpen%;      'Keep global track of whether matlab has been opened.

'---------- OpenMatlab%() ---------------------------------------------------------------------
'
'Opens an invisible Matlab window that can only be used by Spike2.  Checks on the success
'of opening a Matlab window, returns 0 if successful, -1 for failure, other values unexpected.
'
'----------------------------------------------------------------------------------------------

func OpenMatlab%()
    var openOK% := -1;  'assume failure (but not because of pessimism!)
    
    if matlabIsOpen% = 0 then
    
        'Open an invisible Matlab window, and make it a Spike2-only window
        openOK% := MatLabOpen(1);  
        
        'Report results to log window
        if openOK% = 0 then
            printlog("Success in opening Matlab!\n");
            matlabIsOpen% := 1;
        else
            printlog("Failure in opening Matlab!\n");
            matlabIsOpen% := 0;
        endif;
    else
        
        printlog("Matlab cannot be opened because there is already a Matlab instantiation running!");
        printlog("Returning open 'success'; existing instantiation should work!");
        openOK% := 0;
        
    endif;
    
    'Explicitly seed Matlab's random number generator with the system clock (because otherwise it won't!)
    EvalMatlabStatement%("s = RandStream.create('mt19937ar','seed',floor(rem(now,10^4)*10^5));RandStream.setDefaultStream(s);");
    
    'Return results
    return openOK%
    
end


'---------- CloseMatlab() -------------------------------------------------------------------------
'
'Closes an open Matlab window.  Requires argument returned from OpenMatlab%() indicating success/
'failure of opening.  Will not attempt to close a Matlab window if there was no success in opening
'one.  Documentation on MatLabClose is essentially non-existent, but the function does not return
'any value.  There seems to be no way of verifying that it closed the Matlab or of knowing what
'will happen if you attempt to close a Matlab window that is not open.
'
'--------------------------------------------------------------------------------------------------

func CloseMatlab(openOK%)
    var x%;
    if openOK% = 0 then
        
        'perhaps a poorly-designed effort to make sure any created figures are not lost
        x% := GetHowManyMatlabFiguresOpen%();
        while x% > 0 do
            message("There are " + str$(x%) + " Matlab figure windows open, please close to continue!");
            x% := GetHowManyMatlabFiguresOpen%();
        wend;
        
        MatLabClose();
        printlog("Sent command to close Spike2's Matlab instantiation!\n");
    endif;
end


'---------- EvalMatlabStatement%(statement$) ------------------------------------------------------
'
'Evaluates a string statement in the workspace of the open Matlab window.  You can build any legal
'Matlab statement into a string, including creation and assignment of variables.  For instance, if
'statement$ is "myvar = 7*2;" then a variable called "myvar" will be created in the Matlab workspace
'with a value of 14.  Prints to the log file on success or failure.  Prints Matlab's error output
'to the log file on failure.  Returns the value of evalOK%.

func EvalMatlabStatement%(statement$)
    
    var evalOK% := -1;
    var err$;
    
    evalOK% := MatLabEval(statement$,err$);
    
    if evalOK% = 0 then
        'Yeah, this gets called WAY too often to see every successful call
        'printlog("Success in passing command to Matlab!\n");
    else
        printlog("Failure in passing command to Matlab!\n");
        printlog("Matlab response is '" + err$ + "'\n");
    endif
    
    return evalOK%;    
    
end



'---------- PutMatlabValueFloat%(matVarName$,floatToPut) --------------------------------------
'
'Puts a floating point variable into Matlab.  Places the value in floatToPut into matVarName$
'returns 0 if success, -1 if failure.
'
'----------------------------------------------------------------------------------------------

func PutMatlabValueFloat%(matVarName$,floatToPut)
    
    var getOK% := -1;
    
    getOK% := MatLabPut(matVarName$,floatToPut); 
    if getOK% = -1 then
        printlog("Failure in placing variable " + matVarName$ + "!\n");
    endif
    
    return getOK%;
    
end



'---------- PutMatlabValueFloatArray%(matVarName$,floatToPut) ---------------------------------
'
'Puts a floating point 1-D array variable into Matlab.  Places the values in floatToPut[] into 
'matVarName$
'returns 0 if success, -1 if failure.
'
'Note that the default behavior will put the array into a Matlab column vector.
'
'----------------------------------------------------------------------------------------------

func PutMatlabValueFloatArray%(matVarName$,floatToPut[])
    
    var getOK% := -1;
    
    getOK% := MatLabPut(matVarName$,floatToPut[]); 
    if getOK% = -1 then
        printlog("Failure in placing variable " + matVarName$ + "!\n");
    endif
    
    return getOK%;
    
end



'---------- PutMatlabValueInt%(matVarName$,intToPut%) -----------------------------------------
'
'Puts an int variable into Matlab.  Places the value in intToPut% into matVarName$
'returns 0 if success, -1 if failure.
'
'----------------------------------------------------------------------------------------------

func PutMatlabValueInt%(matVarName$,intToPut%)
    
    var getOK% := -1;
    
    getOK% := MatLabPut(matVarName$,intToPut%); 
    if getOK% = -1 then
        printlog("Failure in placing variable " + matVarName$ + "!\n");
    endif
    
    return getOK%;
    
end



'---------- PutMatlabValueIntArray%(matVarName$,intToPut%[]) ----------------------------------
'
'Puts an int variable 1-D array into Matlab.  Places the values in intToPut%[] into matVarName$
'returns 0 if success, -1 if failure.
'
'Note that the default behavior will put the array into a Matlab column vector.
'
'----------------------------------------------------------------------------------------------

func PutMatlabValueIntArray%(matVarName$,intToPut%[])
    
    var getOK% := -1;
    
    getOK% := MatLabPut(matVarName$,intToPut%[]); 
    if getOK% = -1 then
        printlog("Failure in placing variable " + matVarName$ + "!\n");
    endif
    
    return getOK%;
    
end



'---------- PutMatlabValueStr%(matVarName$,strToPut) ------------------------------------------
'
'Puts a string variable into Matlab.  Places the value(s) in strToPut$ into matVarName$
'returns 0 if success, -1 if failure.
'
'----------------------------------------------------------------------------------------------

func PutMatlabValueStr%(matVarName$,strToPut$)
    
    var getOK% := -1;
    
    getOK% := MatLabPut(matVarName$,strToPut$); 
    if getOK% = -1 then
        printlog("Failure in placing variable " + matVarName$ + "!\n");
    endif
    
    return getOK%;
    
end



'---------- GetMatlabValueFloat%(matVarName$,holdResult) --------------------------------------
'
'Retrieves a floating point variable from Matlab.  holdResult must be the same size as the
'variable in matVarName$ or there will be an error.  Places the result in holdResult and
'returns 0 if success, -1 if failure.
'
'----------------------------------------------------------------------------------------------

func GetMatlabValueFloat%(matVarName$,&holdResult)
    
    var getOK% := -1;
    
    getOK% := MatLabGet(matVarName$,holdResult); 
    if getOK% = -1 then
        printlog("Failure in retreiving variable " + matVarName$ + "!\n");
    endif
    
    return getOK%;
    
end



'---------- GetMatlabValueFloatArray%(matVarName$,holdResult[]) -------------------------------
'
'Retrieves a floating point 1-D array from Matlab.  holdResult[] must be the same size as the
'variable in matVarName$ or there will be an error.  Places the result in holdResult[] and
'returns 0 if success, -1 if failure.
'
'Note that Spike2 expects 1-D vectors in Matlab to be column vectors, NOT row vectors.
'
'----------------------------------------------------------------------------------------------

func GetMatlabValueFloatArray%(matVarName$,&holdResult[])
    
    var getOK% := -1;
    
    getOK% := MatLabGet(matVarName$,holdResult[]); 
    if getOK% = -1 then
        printlog("Failure in retreiving variable " + matVarName$ + "!\n");
    endif
    
    return getOK%;
    
end




'---------- GetMatlabValueInt%(matVarName$,holdResult%) ---------------------------------------
'
'Retrieves an int variable from Matlab.  holdResult% must be the same size as the
'variable in matVarName$ or there will be an error.  Places the result in holdResult% and
'returns 0 if success, -1 if failure.
'
'----------------------------------------------------------------------------------------------

func GetMatlabValueInt%(matVarName$,&holdResult%)
    
    var getOK% := -1;
    var bruteForce$ := "23816asjkbc37389f";  'Nobody named a variable this, I promise
    
    'use brute force method to ensure INT32 data type (INT64 not usable), there's not much point to checking, just do it
    EvalMatlabStatement%(matVarName$ + bruteForce$ + " = int32(" + matVarName$ + ");");
    
    getOK% := MatLabGet(matVarName$+bruteForce$,holdResult%); 
    if getOK% = -1 then
        printlog("Failure in retreiving variable " + matVarName$ + "!\n");
    endif
    
    return getOK%;
    
end



'---------- GetMatlabValueIntArray%(matVarName$,holdResult%[]) --------------------------------
'
'Retrieves an int variable 1-D array from Matlab.  holdResult%[] must be the same size as the
'variable in matVarName$ or there will be an error.  Places the result in holdResult%[] and
'returns 0 if success, -1 if failure.
'
'Note that Spike2 expects 1-D vectors in Matlab to be column vectors, NOT row vectors.
'
'----------------------------------------------------------------------------------------------

func GetMatlabValueIntArray%(matVarName$,&holdResult%[])
    
    var getOK% := -1;
    var bruteForce$ := "23816asjkbc98373f";  'Nobody named a variable this, I promise
    
    'use brute force method to ensure INT32 data type (INT64 not usable), there's not much point to checking, just do it
    EvalMatlabStatement%(matVarName$ + bruteForce$ + " = int32(" + matVarName$ + ");");
    
    getOK% := MatLabGet(matVarName$+bruteForce$,holdResult%[]); 
    if getOK% = -1 then
        printlog("Failure in retreiving variable " + matVarName$ + "!\n");
    endif
    
    return getOK%;
    
end



'---------- GetMatlabValueString%(matVarName$,holdResult$) ------------------------------------
'
'Retrieves a string variable from Matlab. Places the result in holdResult$ and returns 0 if 
'success, -1 if failure.
'
'----------------------------------------------------------------------------------------------

func GetMatlabValueString%(matVarName$,&holdResult$)
    
    var getOK% := -1;
    
    getOK% := MatLabGet(matVarName$,holdResult$); 
    if getOK% = -1 then
        printlog("Failure in retreiving variable " + matVarName$ + "!\n");
    endif
    
    return getOK%;
    
end





'---------- GetHowManyMatlabFiguresOpen%() ----------------------------------------------------
'
'Returns the number of Matlab figures open in the current Matlab instantiation
'
'
'----------------------------------------------------------------------------------------------

func GetHowManyMatlabFiguresOpen%()
    
    var numFigs% := 0;
    
    EvalMatlabStatement%("numFigsOpen = length(findall(0,'type','figure'));");  'In Matlab, numFigsOpen holds number of open figures
    GetMatlabValueInt%("numFigsOpen",numFigs%);  'Get this number to Spike2
    
    return numFigs%;
    
end



'---------- OpenMatlabFigure%(figNum%) --------------------------------------------------------
'
'Explicitly opens a Matlab figure, opens next available figure if figNum% is < 1, otherwise
'opens Figure(figNum%), regardless of whether that figure already exists.
'
'Returns the (Matlab) number of the figure created, can be used with CloseMatlabFigure to
'explicitly close.
'
'This function is not necessary to open a Matlab figure (any EvalMatlabStatement%() call can do
'this on its own, and any arbitrary Matlab function can do this as well), but it does help to
'keep track of a figure we know we want to plot to multiple times, save, close, etc.
'
'----------------------------------------------------------------------------------------------

func OpenMatlabFigure%(figNum%)
    
    var output%;
    
    if figNum% < 1 then
        EvalMatlabStatement%("newest_fig = figure;");  'open the next available figure, keep number
        GetMatlabValueInt%("newest_fig",output%);  'Get this number to Spike2
    else
        EvalMatlabStatement%("figure(" + Str$(figNum%) + ");");  'open the requested figure
        output% := figNum%;
    endif;
    
    return(output%);
    
end





'---------- CloseMatlabFigure(figNum%) -------------------------------------------------------
'
'Explicitly closes the Matlab figure in figNum%.  Useful for closing figures we know we don't
'want to save before trying to close Matlab, at which point CED will whine if there are open
'Matlab figures.
'
'Just coded as a PROC because I'm not sure Matlab will return a reasonable success value.
'
'----------------------------------------------------------------------------------------------

proc CloseMatlabFigure(figNum%)
    
    EvalMatlabStatement%("Close(" + str$(figNum%) + ");");
    
end
