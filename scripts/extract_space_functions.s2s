' $Id$
'
'
' Functions for extracting space data. To use include this file in your source. Just two functions to call....
'
' First call (just once) the init func with arg of handle for xy window. If -1, no plotting is done. 
' ExtractSpaceInitialize(xywindow%);
' 
' Call ExtractSpace() as many times as needed. If processing an entire file, use tStart=tEnd=-1. 
' If using during online processing, call with end-to-end time blocks. Call with tEnd=-1 at end of 
' processing to make sure you get everything. 
' 
' Caller should open data files before calling ExtractSpace the first time and close them after
' all processing is complete. 



var xspcIsInitialized% := 0;
var xspcWindowXY%;
var xspcChanMean%;
var xspcChanMeanPlus%;
var xspcChanMeanMinus%;
var xspcChanBkgd%;
var xspcChanBkgdPlus%;
var xspcChanBkgdMinus%;
var xspcChanLines%;
const xspcPI := 3.141592653589793;
const xspcNSpeakers% := 16;      ' # speakers, not counting bkgd speaker. 
const xspcMaxTrials% := 100;     ' max # trials allowed. Should be bigger than anyone would ever want. 
var xspcTrialCounts%[xspcNSpeakers%+1];
var xspcSpikeCounts%[xspcNSpeakers%+1][xspcMaxTrials%]; ' spike counts for completed trials on each trial type
var xspcSpikeRate[xspcNSpeakers%+1][xspcMaxTrials%];    ' spike rates for completed trials on each trial type
var xspcSpikeRateMean[xspcNSpeakers%+1];' mean spike rate for each trial type
var xspcSpikeRateStd[xspcNSpeakers%+1]; ' std dev for above. 
var xspcUnitX[xspcNSpeakers%+1];
var xspcUnitY[xspcNSpeakers%+1];


' Extract data from the space1g data file currently open. Writes a "beh" and "bak" file on the (already-opened 
' by the caller) file handles hE% and hB%, respectively. This will work after spike sorting - whatever spikes are 
' "visible" will be written to the files. Thus, you can spike sort, then turn off some wavemarks and run this against
' the file and only those wavemarks you HAVEN'T turned off will be processed. 
' tStart and tEnd are start and end times to process. 
'
' tStart and tEnd = -1, -1 means process entire file. 
' tEnd >0 means will process up to and including that time. 
' tStart = -1 means process from beginning, including first time, otherwise it means process all samples after, not
' including, tStart.
    
proc ExtractSpace(tStart, tEnd, hData%, hXY%, hE%, hB%, chanWM%, chanTM%, chanTrig%, chanLever%)

var tLast := -1;
var t;
var sText$, sChar$, sNoiseFile$;
var isStart%, isNoise%;
var iTrialNum%, iS1Num%, iTrialType%, iSpk%;
var fAtten, fFreq;

' State control
const stateStart% := 1;
const stateEnd% := 2;
const stateNone% := 0;
var iStateCurrent% := stateNone%;

var tCurrentStartMarker := -1;
var tCurrentStartTrigger := -1;     ' time of trigger that starts sound
var tCurrentSpikeIntervalEndTime := -1;    ' end time of interval to record spikes for (write to bak file)
var iCurrentReactionTime% := -1;
var iCurrentTrialNum% := -1;
var iCurrentS1Num% := -1;
var iCurrentSpk% := -1;
var iCurrentS1Flg% := -1;
var fCurrentAtten := -1;
var iCurrentResp% := -1;
var fCurrentRxTime := -1;
var nSpikes%;
const maxSpikes% := 1000;       ' Make sure this is bigger than the max number of spikes you'll get from a spike measurement interval
var tSpikes[maxSpikes%];
var i%;


if xspcIsInitialized% = 0 then
    PrintLog("WARNING! You really ought to call ExtractSpaceInitialize()...\n");
endif

View(hData%);
tLast := tStart;
t := NextTextMarker(tLast, chanTM%, sText$, sChar$, isStart%, iTrialNum%, iS1Num%, iTrialType%, iSpk%, fAtten, isNoise%, sNoiseFile$, fFreq);
while t > 0 and t >= tStart and (tEnd < 0 or (tEnd > 0 and t <= tEnd)) do

    PrintLog("%f: %s\n", t, sText$);

    docase
    case iStateCurrent% = stateStart% then
    
        ' Expecting end state
        if isStart% = 0 then
            PrintLog("Found End, Char=%s\n", sChar$);
            iStateCurrent% := stateEnd%;
            
            docase
            case sChar$ = "E" then
                iCurrentResp% := 0;
                iCurrentReactionTime% := 0;
                tCurrentSpikeIntervalEndTime := t;
            case sChar$ = "F" then
                iCurrentResp% := -1;
                iCurrentReactionTime% := 0;
                tCurrentSpikeIntervalEndTime := NextEvent(tCurrentStartTrigger, chanLever%, 1);
            case sChar$ = "M" then
                iCurrentResp% := 0;
                iCurrentReactionTime% := 9999;
                tCurrentSpikeIntervalEndTime := t;
            case sChar$ = "H" then
                var val;
                var t1, t2;
                iCurrentResp% := 1;
                tCurrentSpikeIntervalEndTime := NextEvent(tCurrentStartTrigger, chanLever%, 0);
                iCurrentReactionTime% := round((tCurrentSpikeIntervalEndTime - tCurrentStartTrigger)*1000);
            else
                iCurrentResp% := -99;   ' shouldn't happen!
                iCurrentReactionTime% := -9999;
                tCurrentSpikeIntervalEndTime := -1;
                PrintLog("ERROR! Unknown end state char \"%s\"\n", sChar$);
            endcase

            ' Write stuff to ecode file
            View(hE%).Print("%d\t%d\t%d\t%d\t%3.0f\t%d\t%d\n", iCurrentTrialNum%, iCurrentS1Num%, iCurrentSpk%, iCurrentS1Flg%, fCurrentAtten, iCurrentResp%, iCurrentReactionTime%);

            ' Get spike times and write them (actually the time in ms relative to the trigger time) to the bak file. 
            nSpikes% := View(hData%).ChanData(chanWM%, tSpikes[], tCurrentStartTrigger, tCurrentSpikeIntervalEndTime);
            if (sChar$ = "E") then
                ExtractSpaceUpdate%(iCurrentSpk%, nSpikes%, tCurrentSpikeIntervalEndTime-tCurrentStartTrigger);
            endif
            View(hB%).Print("3501\t%d\t%d\t%d\t%2.1f\t%d\t%d\t%d\n", iCurrentS1Num%, 1-isNoise%, iCurrentSpk%, fCurrentAtten, iCurrentS1Flg%, nSpikes%, iCurrentResp%);
            for i%:= 0 to nSpikes%-1 do
                View(hB%).Print("%d\t%4.0f\n", i%, (tSpikes[i%]-tCurrentStartTrigger)*1000);
            next
            
        else
            PrintLog("Unexpected text mark! Expect an end marker, but we got this: %s\n", sText$);
        endif
        
    case iStateCurrent% = stateNone% or iStateCurrent% = stateEnd% then

        ' Expecting start state
        if isStart% = 1 then
            PrintLog("Found Start, Char=%s\n", sChar$);
            iStateCurrent% := stateStart%;
            tCurrentStartMarker := t;
            tCurrentStartTrigger := NextEvent(tCurrentStartMarker, chanTrig%, 1);
            iCurrentTrialNum% := iTrialNum%;
            iCurrentS1Num% := iS1Num%;
            iCurrentSpk% := iSpk%;
            fCurrentAtten := fAtten;
            iCurrentS1Flg% := 1;
            if sChar$ = "T" then
                iCurrentS1Flg% := 2;
            endif
            ' These are set at end state
            iCurrentResp% := -2;
            fCurrentRxTime := -2;

        else
            PrintLog("Unexpected text mark! Expect a start marker, but we got this: %s\n", sText$);
        endif

    else
    
        PrintLog("ERROR: Unknown state %d\n", iStateCurrent%);
        halt;
        
    endcase
    
        
    tLast := t;
    t := NextTextMarker(tLast, chanTM%, sText$, sChar$, isStart%, iTrialNum%, iS1Num%, iTrialType%, iSpk%, fAtten, isNoise%, sNoiseFile$, fFreq);

wend


end


' search the channel chan% for an event of type eventtype (1 or 0), 
' starting at time tstart. Return the time of the event found, or 
' -1 if no such event found. 
' The eventtype is the value of 'val' as described in Spike2's doc for 
' NextTime on an event channel. The channel chan% should be an event 
' channel with rising and falling transitions. When NextTime finds 
' either type of event, the value of 'val' is set to the logical value 
' (1 or 0) of the channel BEFORE the transition. Thus, a rising 
' transition, which goes from 0 to 1, returns a 'val' value of 0. A 
' falling transition, which goes from 1 to 0, returns a 'val' value 
' of 1. 

func NextEvent(tstart, chan%, eventtype)

    var t:=-1, t1:=-1;
    var val;

    t := tstart;
    t1 := NextTime(chan%, t, val);
    while val <> eventtype and t1 >= 0 do
        t := t1;
        t1 := NextTime(chan%, t, val);
    wend

    return t1;

end



' Get reaction time in ms. A large negative value is returned if it is not found. 
' The reaction time is defined as the time (in ms) between these two things.....
' 1. The first falling event on chanTrig% that follows the time tstart
' 2. The first falling event on chanLever% that follows the time from #1

func GetReactionTime%(tstart, chanTrig%, chanLever%)

    var t:=-1, t1:=-1, t2:=-1;
    var val;
    var tReaction% := -99999;
    var isDone% := 0;

    ' Find time from #1 above
    t := tstart;
    t1 := NextTime(chanTrig%, t, val);
    while val <> 1 and t1 >= 0 do
        t := t1;
        t1 := NextTime(chanTrig%, t, val);
    wend

    if t1 > 0 then
    
        ' Now find time from #2 above
        t := t1;
        t2 := NextTime(chanLever%, t, val);
        while val <> 1 and t2 >= 0 do
            t := t2;
            t2 := NextTime(chanLever%, t, val);            
        wend

        if t2 >= 0 then
            tReaction% := round((t2-t1)*1000);
        endif
        
    endif
    
    return tReaction%;
end

' Patterned after NextTime func. Finds next text marker in channel chan%. See Space.s2s for format of text markers written. 
' Arguments are set depending on marker type. For start type markers, sChar$ will be "S" or "T". For end type markers, sChar$
' will be "E", "F", "H" or "M" or "X". 
func NextTextMarker(tStart, chan%, &sText$, &sChar$, &isStart%, &iTrialNum%, &iS1Num%, &iTrialType%, &iSpk%, &fAtten, &isNoise%, &sNoiseFile$, &fFreq)

var isOK% := 0;
var t := -1;
var tfound := -1;
var code%[4];

t := tStart;
tfound := NextTime(chan%, t, code%, sText$);
while tfound >= 0 and isOK% = 0 do

    ' Try reading a start marker for noise first, then start marker for tone. If both fail, try end marker. 
    docase
    case ReadStr(sText$, sChar$, iTrialNum%, iS1Num%, iTrialType%, iSpk%, fAtten, fFreq) = 7 then

        isStart% := 1;
        isNoise% := 0;
        isOK% := 1;
    
    case ReadStr(sText$, sChar$, iTrialNum%, iS1Num%, iTrialType%, iSpk%, fAtten, sNoiseFile$) = 7 then

        isStart% := 1;
        isNoise% := 1;
        isOK% := 1;

    case InStr(sText$, "E")=1 or InStr(sText$, "F")=1 or InStr(sText$, "H")=1 or InStr(sText$, "M")=1 or InStr(sText$, "X")=1 then
    
        sChar$ := Mid$(sText$, 1, 1);
        ReadStr(Mid$(sText$, 3), iTrialNum%);
'    case ReadStr(sText$, sChar$, iTrialNum%) = 2 then

        isStart% := 0;
        isNoise% := 0;
        isOK% := 1;
    
    else
        
        PrintLog("ERROR in NextTextMarker! Cannot grok marker text: %s\n", sText$);
        t := tfound;
        tfound := NextTime(chan%, t, code%, sText$);

    endcase

wend


return tfound;

end


proc ExtractSpaceInitialize(windowXY%)

var ang;
var i%;


xspcWindowXY% := windowXY%;
xspcChanMean% := View(xspcWindowXY%).XYSetChan(0, -xspcNSpeakers%+1, 0, 2, 8);
xspcChanMeanPlus% := View(xspcWindowXY%).XYSetChan(0, -xspcNSpeakers%+1, 0, 2, 7);
xspcChanMeanMinus% := View(xspcWindowXY%).XYSetChan(0, -xspcNSpeakers%+1, 0, 2, 7);
xspcChanBkgd% := View(xspcWindowXY%).XYSetChan(0, -xspcNSpeakers%+1, 0, 2, 0);
xspcChanBkgdPlus% := View(xspcWindowXY%).XYSetChan(0, -xspcNSpeakers%+1, 0, 2, 5);
xspcChanBkgdMinus% := View(xspcWindowXY%).XYSetChan(0, -xspcNSpeakers%+1, 0, 2, 5);
xspcChanLines% := View(xspcWindowXY%).XYSetChan(0, -32, 0, 2, 20);

ArrConst(xspcTrialCounts%, 0);

for i%:=0 to xspcNSpeakers% do
    ang := -xspcPI/8*(5+i%);
    xspcUnitX[i%] := cos(ang);
    xspcUnitY[i%] := sin(ang);
next
xspcIsInitialized% := 1;
end



func ExtractSpaceUpdate%(spk%, n%, sec)
    var status% := 0;
    var index%; ' index into arrays where current trial is placed. Prior to incrementing trial count for this speaker!
    var arrx[xspcNSpeakers%];
    var arry[xspcNSpeakers%];
    var arrxl[32];
    var arryl[32];
    var i%;
    var maxrate := 0;
    
    ' TODO check sec != 0
    PrintLog("spk %d index %d n %d sec %f\n", spk%, index%, n%, sec);
    index% := xspcTrialCounts%[spk%];
    xspcSpikeCounts%[spk%][index%] += n%;
    xspcSpikeRate[spk%][index%] := xspcSpikeCounts%[spk%][index%]/sec;  ' sec != 0
    if index% >= 1 then
        ArrSum(xspcSpikeRate[spk%][0:index%], xspcSpikeRateMean[spk%], xspcSpikeRateStd[spk%]); 
    endif
    xspcTrialCounts%[spk%] += 1;
            
    ' rate. Get max rate while we're at it. 
    ArrConst(arrx, 0);
    ArrConst(arry, 0);
    for i% := 0 to xspcNSpeakers%-1 do
        arrx[i%] := xspcSpikeRateMean[i%] * xspcUnitX[i%];
        arry[i%] := xspcSpikeRateMean[i%] * xspcUnitY[i%];
        if xspcSpikeRateMean[i%] > maxrate then
            maxrate := xspcSpikeRateMean[i%];
        endif
    next
    View(xspcWindowXY%).XYAddData(xspcChanMean%, arrx, arry);
    
    ' rate+std
    ArrConst(arrx, 0);
    ArrConst(arry, 0);
    for i% := 0 to xspcNSpeakers%-1 do
        arrx[i%] := (xspcSpikeRateMean[i%] + xspcSpikeRateStd[i%]) * xspcUnitX[i%];
        arry[i%] := (xspcSpikeRateMean[i%] + xspcSpikeRateStd[i%]) * xspcUnitY[i%];
    next
    View(xspcWindowXY%).XYAddData(xspcChanMeanPlus%, arrx, arry);

    ' rate-std
    ArrConst(arrx, 0);
    ArrConst(arry, 0);
    for i% := 0 to xspcNSpeakers%-1 do
        arrx[i%] := (xspcSpikeRateMean[i%] - xspcSpikeRateStd[i%]) * xspcUnitX[i%];
        arry[i%] := (xspcSpikeRateMean[i%] - xspcSpikeRateStd[i%]) * xspcUnitY[i%];
    next
    View(xspcWindowXY%).XYAddData(xspcChanMeanMinus%, arrx, arry);

    ' bkgd
    ArrConst(arrx, 0);
    ArrConst(arry, 0);
    for i% := 0 to xspcNSpeakers%-1 do
        arrx[i%] := xspcSpikeRateMean[xspcNSpeakers%] * xspcUnitX[i%];
        arry[i%] := xspcSpikeRateMean[xspcNSpeakers%] * xspcUnitY[i%];
    next
    View(xspcWindowXY%).XYAddData(xspcChanBkgd%, arrx, arry);

    ' bkgd+std
    ArrConst(arrx, 0);
    ArrConst(arry, 0);
    for i% := 0 to xspcNSpeakers%-1 do
        arrx[i%] := (xspcSpikeRateMean[xspcNSpeakers%] + xspcSpikeRateStd[xspcNSpeakers%]) * xspcUnitX[i%];
        arry[i%] := (xspcSpikeRateMean[xspcNSpeakers%] + xspcSpikeRateStd[xspcNSpeakers%]) * xspcUnitY[i%];
    next
    View(xspcWindowXY%).XYAddData(xspcChanBkgdPlus%, arrx, arry);

    ' bkgd-std
    ArrConst(arrx, 0);
    ArrConst(arry, 0);
    for i% := 0 to xspcNSpeakers%-1 do
        arrx[i%] := (xspcSpikeRateMean[xspcNSpeakers%] - xspcSpikeRateStd[xspcNSpeakers%]) * xspcUnitX[i%];
        arry[i%] := (xspcSpikeRateMean[xspcNSpeakers%] - xspcSpikeRateStd[xspcNSpeakers%]) * xspcUnitY[i%];
    next
    View(xspcWindowXY%).XYAddData(xspcChanBkgdMinus%, arrx, arry);

    ' lines
    ArrConst(arrxl, 0);
    ArrConst(arryl, 0);
    for i% := 0 to xspcNSpeakers%-1 do
        arrxl[i%*2+1] := maxrate * 1.25 * xspcUnitX[i%];
        arryl[i%*2+1] := maxrate * 1.25 * xspcUnitY[i%];
    next
    View(xspcWindowXY%).XYAddData(xspcChanLines%, arrxl, arryl);
    
    return status%;
end
