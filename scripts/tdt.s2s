var port% := 1;
var baud% := 9600;
var bits% := 8;
var par% := 0;
var stopbit% := 1;
var hsk% := 0;
var timeoutCounterDefault% := 100;
var timeoutCounter% := 100;
#include "tdtconst.s2s"

func tdtSerial(open%, to%)
    var status;
    var bytes% := 0;
    var dummy%[1024];
    var len%;

    if (to% > 0) then timeoutCounter% := to%;
    else timeoutCounter% := timeoutCounterDefault%; endif
    
    if open% > 0 then
        status := SerialOpen(port%, baud%, bits%, par%, stopbit%, hsk%);    ' defaults 9600 baud, no parity, 7+1 bits
        if (status < 0) then
            PrintLog("Open status = " + str$(status) + "\n");
        endif
        ' flush input buffer
        bytes% := SerialCount(port%);
        if bytes% > 0 then
            len% += SerialRead(port%, dummy%[]);
            PrintLog("Flushed " + str$(len%) + " bytes from input buffer.\n");
        else
            PrintLog("Input buffer empty.\n");
        endif
    else
        SerialClose(port%);
    endif
    return status;
end


func sendCommand%(len%)
    var status;
    var cmd%[258];
    var i%;
    cmd%[0] := 0xaa;
    cmd%[1] := len%;
    for i% := 0 to len% do
        cmd%[2 + i%] := i%;
    next;
    
'    PrintLog("Sending command, length " + str$(len%) + "(" + str$(len(cmd%[:2+len%])) + ")\n");
    status := SerialWrite(port%, cmd%[:2+len%]);
    return status;
end

func sendTDTCommand%(cmd%[])
    var status;
    var len%;
    len% := len(cmd%[]);
    'JSJ taking this out because it's WAY too verbose
    'PrintLog("sendTDTCommand, command %x length %d\n", cmd%[0], cmd%[1]);
    status := SerialWrite(port%, cmd%[]);
    return status;
end


func readReply%()
    var data% := 0;
    var counter% := 0;
    var status%;
    repeat
        status% := SerialRead(port%, data%);
        counter% += 1;
    until status%=1 or counter% = timeoutCounter%;

    return status%;
end

func readTDTReply%(data%[])
    var bytes% := 0;
    var done% := 0;
    var counter% := 0;
    var status%;
    var len% := 0;
    
    'var data2%[10];   'testing
    'printlog("Starting Serial Read Process...\n");  'testing
    
    repeat
        bytes% := SerialCount(port%);
        
       
        if bytes% > 0 then
            'printlog("Bytes read is %d\n",bytes%); 'testing
            'len% += SerialRead(port%, data2%[len%:]);  'testing
            'printlog("Current values are %d\n",data2%[]);  'testing, just print the whole damn thing
            'printlog("...and Len is %d\n",len%);  'testing
            len% += SerialRead(port%, data%[len%:]);  'original
'            PrintLog("Read reply len=" + str$(len%) + "\n");
        else
            counter% += 1;
            Yield();
        endif
    
    'arrconst(data%[],data2%[]);    'testing, return the data...
    
        if (len% >= 2 and len% = (2+data%[1])) then
            done% := 1;
        endif
    until done%=1 or counter% = timeoutCounter%;

    if counter% = timeoutCounter% then
        len% := -1;
    endif
    

    
'    PrintLog("Returning reply len% = " + str$(len%) + "\n");
    
    return len%;
end


func readTDTReplyNoWait%(data%[])
    var bytes% := 0;
    var status% := -1;  'return -1 on no data
    var len% := 0;

    bytes% := SerialCount(port%);
          
    if bytes% > 0 then
        len% += SerialRead(port%, data%[len%:]);  'original
    endif
    
    if (len% >= 2 and len% = (2+data%[1])) then
        status% := 1;  'return 1 on success
    else
        if len% > 0 then
            status% := 0;  'return 0 on read but not all of expected data
        endif;
    
    endif
    
    return status%;
end




func tdtPING%()
    var cmd%[2];
    var reply%[2];
    var status%:=0;
    cmd%[0] := cmdPING%;
    cmd%[1] := 0;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        endif
    endif
    return status%;
end

func tdtREWARD%(rewardLength%)
    var cmd%[4];
    var reply%[10];
    var status%:=0;
    cmd%[0] := cmdREWARD%;
    cmd%[1] := 2;
    cmd%[2] := rewardLength% mod 256;
    cmd%[3] := rewardLength% / 256;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then  'communication error
        status% := -1;
    else
        if reply%[0] <> replyOK% then  'return other failure
            status% := 1;
        endif
    endif
    return status%;  'return 0 on success
end


func tdtRewardNoWait%(rewardLength%)
    var cmd%[4];
    var reply%[10];
    var status%:=0;
    cmd%[0] := cmdREWARD%;
    cmd%[1] := 2;
    cmd%[2] := rewardLength% mod 256;
    cmd%[3] := rewardLength% / 256;
    sendTDTCommand%(cmd%[]);
    return 0;  'just return a value, it won't mean anything
end

func tdtPM1Clear%(din%)
    var cmd%[3];
    var reply%[2];
    var status%:=0;
    cmd%[0] := cmdPM1CLEAR%;
    cmd%[1] := 1;
    cmd%[2] := din%;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        endif
    endif
    return status%;
end

func tdtPM1Config%(din%, ccode%)
    var cmd%[4];
    var reply%[2];
    var status%;
    cmd%[0] := cmdPM1CONFIG%;
    cmd%[1] := 2;
    cmd%[2] := din%;
    cmd%[3] := ccode%;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        endif
    endif
    return status%;
end

func tdtPM1Mode%(din%, mode%)
    var cmd%[4];
    var reply%[2];
    var status%;
    cmd%[0] := cmdPM1MODE%;
    cmd%[1] := 2;
    cmd%[2] := din%;
    cmd%[3] := mode%;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        endif
    endif
    return status%;
end

func tdtPM1Spkon%(din%, sn%)
    var cmd%[4];
    var reply%[2];
    var status%;
    cmd%[0] := cmdPM1SPKON%;
    cmd%[1] := 2;
    cmd%[2] := din%;
    cmd%[3] := sn%;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        endif
    endif
    return status%;
end

func tdtPM1Spkoff%(din%, sn%)
    var cmd%[4];
    var status%;
    var reply%[2];
    cmd%[0] := cmdPM1SPKOFF%;
    cmd%[1] := 2;
    cmd%[2] := din%;
    cmd%[3] := sn%;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        endif
    endif
    return status%;
end

func tdtPA4Atten%(din%, atten)
    var cmd%[5];
    var i%;
    var status%;
    var reply%[2];
    cmd%[0] := cmdPA4ATTEN%;
    cmd%[1] := 3;
    cmd%[2] := din%;
    ' mult by 10, convert to int, pass high byte and low byte....
    i% := atten * 10;
    cmd%[4] := i% / 256;
    cmd%[3] := i% mod 256;
    'PrintLog("Sending atten [3]=" + str$(cmd%[3]) + " [4]=" + str$(cmd%[4]) + "\n");
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        endif
    endif
    return status%;
end

func tdtPA4Setup%(din%, base, stepval)
    var cmd%[7];
    var i%;
    var status%;
    var reply%[2];
    cmd%[0] := cmdPA4SETUP%;
    cmd%[1] := 5;
    cmd%[2] := din%;
    ' mult by 10, convert to int, pass high byte and low byte....
    i% := base * 10;
    cmd%[3] := i% / 256;
    cmd%[4] := i% mod 256;
    i% := stepval * 10;
    cmd%[5] := i% / 256;
    cmd%[6] := i% mod 256;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        endif
    endif
    return status%;
end

func tdtPA4Auto%(din%)
    var cmd%[3];
    var status%;
    var reply%[2];
    cmd%[0] := cmdPA4AUTO%;
    cmd%[1] := 1;
    cmd%[2] := din%;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        endif
    endif
    return status%;
end

func tdtPA4Man%(din%)
    var cmd%[3];
    var reply%[2];
    var status%;
    cmd%[0] := cmdPA4MAN%;
    cmd%[1] := 1;
    cmd%[2] := din%;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        endif
    endif
    return status%;
end

func tdtPA4Mute%(din%)
    var cmd%[3];
    var reply%[2];
    var status%;
    cmd%[0] := cmdPA4MUTE%;
    cmd%[1] := 1;
    cmd%[2] := din%;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        endif
    endif
    return status%;
end

func tdtPA4Nomute%(din%)
    var cmd%[3];
    var status%;
    var reply%[2];
    cmd%[0] := cmdPA4NOMUTE%;
    cmd%[1] := 1;
    cmd%[2] := din%;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        endif
    endif
    return status%;
end

func tdtPA4Ac%(din%)
    var cmd%[3];
    var status%;
    var reply%[2];
    cmd%[0] := cmdPA4AC%;
    cmd%[1] := 1;
    cmd%[2] := din%;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        endif
    endif
    return status%;
end

func tdtPA4Dc%(din%)
    var cmd%[3];
    var status%;
    var reply%[2];
    cmd%[0] := cmdPA4DC%;
    cmd%[1] := 1;
    cmd%[2] := din%;
    sendTDTCommand%(cmd%[]);
end

func tdtPA4Read%(din%)
    var cmd%[3];
    var status%;
    var reply%[2];
    cmd%[0] := cmdPA4READ%;
    cmd%[1] := 1;
    cmd%[2] := din%;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        endif
    endif
    return status%;
end

func tdtPI2Clear%(din%)
    var cmd%[3];
    var reply%[2];
    var status%;
    cmd%[0] := cmdPI2CLEAR%;
    cmd%[1] := 1;
    cmd%[2] := din%;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        endif
    endif
    return status%;
end

func tdtPI2Outs%(din%, omask%)
    var cmd%[4];
    var status%;
    var reply%[2];
    cmd%[0] := cmdPI2OUTS%;
    cmd%[1] := 2;
    cmd%[2] := din%;
    cmd%[3] := omask%;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        endif
    endif
    return status%;
end

func tdtPI2Logic%(din%, logout%, login%)
    var cmd%[5];
    var status%;
    var reply%[2];
    cmd%[0] := cmdPI2LOGIC%;
    cmd%[1] := 3;
    cmd%[2] := din%;
    cmd%[3] := logout%;
    cmd%[4] := login%;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        endif
    endif
    return status%;
end;

func tdtPI2Debounce%(din%, dbtime%)
    var cmd%[4];
    var status%;
    var reply%[2];
    cmd%[0] := cmdPI2DEBOUNCE%;
    cmd%[1] := 2;
    cmd%[2] := din%;
    cmd%[3] := dbtime%;
    sendTDTCommand%(cmd%[]);
end

func tdtPI2Latch%(din%, lmask%)
    var cmd%[4];
    var status%;
    var reply%[2];
    cmd%[0] := cmdPI2LATCH%; 
    cmd%[1] := 2;
    cmd%[2] := din%;
    cmd%[3] := lmask%;
    sendTDTCommand%(cmd%[]);
end

func tdtPI2Autotime%(din%, bitn%, dur%)
    var cmd%[5];
    var status%;
    var reply%[2];
    cmd%[0] := cmdPI2AUTOTIME%;
    cmd%[1] := 3;
    cmd%[2] := din%;
    cmd%[3] := bitn%;
    cmd%[4] := dur%;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        endif
    endif
    return status%;
end

func tdtPI2Toggle%(din%, tmask%)
    var cmd%[4];
    var status%;
    var reply%[2];
    cmd%[0] := cmdPI2TOGGLE%; 
    cmd%[1] := 2;
    cmd%[2] := din%;
    cmd%[3] := tmask%;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        endif
    endif
    return status%;
end

func tdtPI2Map%(din%, bitn%, mmask%)
    var cmd%[5];
    var status%;
    var reply%[2];
    cmd%[0] := cmdPI2MAP%;
    cmd%[1] := 3;
    cmd%[2] := din%;
    cmd%[3] := bitn%;
    cmd%[4] := mmask%;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        endif
    endif
    return status%;
end

func tdtPI2Zerotime%(din%, bitmask%)
    var cmd%[4];
    var status%;
    var reply%[2];
    cmd%[0] := cmdPI2ZEROTIME%;
    cmd%[1] := 2;
    cmd%[2] := din%;
    cmd%[3] := bitmask%;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        endif
    endif
    return status%;
end

'zzzzzzzzzzz return value
'proc tdtPI2Gettime%(din%, bitn%)
'    var cmd%[4];
'    cmd%[0] := cmdPI2GETTIME%;
'    cmd%[1] := 2;
'    cmd%[2] := din%;
'    cmd%[3] := bitn%;
'    sendTDTCommand%(cmd%[]);
'end

func tdtPI2Write%(din%, bitcode%)
    var cmd%[4];
    var status%;
    var reply%[2];
    cmd%[0] := cmdPI2WRITE%;
    cmd%[1] := 2;
    cmd%[2] := din%;
    cmd%[3] := bitcode%;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        endif
    endif
    return status%;
end

' return value!!!
func tdtPI2Read%(din%, &value%)
    var cmd%[3];
    var status%:=0;
    var reply%[3];
    cmd%[0] := cmdPI2READ%;
    cmd%[1] := 1;
    cmd%[2] := din%;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        else
            if reply%[1] = 1 then
                value% := reply%[2];
            else
                PrintLog("ERROR - expecting reply from PI2Read to have length 3!\n");
                status% := -2;
            endif
        endif
    endif
    return status%;
end

func tdtPI2Setbit%(din%, bitmask%)
    var cmd%[4];
    var status%;
    var reply%[2];
    cmd%[0] := cmdPI2SETBIT%;
    cmd%[1] := 2;
    cmd%[2] := din%;
    cmd%[3] := bitmask%;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        endif
    endif
    return status%;
end

func tdtPI2Clrbit%(din%, bitmask%)
    var cmd%[4];
    var status%;
    var reply%[2];
    cmd%[0] := cmdPI2CLRBIT%;
    cmd%[1] := 2;
    cmd%[2] := din%;
    cmd%[3] := bitmask%;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        endif
    endif
    return status%;
end

func tdtPI2Outsx%(din%, pnum%)
    var cmd%[4];
    var status%;
    var reply%[2];
    cmd%[0] := cmdPI2OUTSX%;
    cmd%[1] := 2;
    cmd%[2] := din%;
    cmd%[3] := pnum%;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        endif
    endif
    return status%;
end

func tdtPI2Writex%(din%, pnum%, bitcode%)
    var cmd%[5];
    var status%;
    var reply%[2];
    cmd%[0] := cmdPI2WRITEX%;
    cmd%[1] := 3;
    cmd%[2] := din%;
    cmd%[3] := pnum%;
    cmd%[4] := bitcode%;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        endif
    endif
    return status%;
end

func tdtPI2Readx%(din%, pnum%)
    var cmd%[4];
    var status%;
    var reply%[2];
    cmd%[0] := cmdPI2READX%;
    cmd%[1] := 2;
    cmd%[2] := din%;
    cmd%[3] := pnum%;
    sendTDTCommand%(cmd%[]);
    Yield();
    if (readTDTReply%(reply%[]) < 0) then
        status% := -1;
    else
        if reply%[0] <> replyOK% then
            status% := 1;
        endif
    endif
    return status%;
end

